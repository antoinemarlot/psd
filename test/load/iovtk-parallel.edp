/*****************************************************************************
                                                                              
         This file is a part of PSD (Parallel Structural Dynamics)            
                                                                              
     -------------------------------------------------------------------      
                                                                              
     Author(s): Mohd Afeef Badri                                              
     Email    : mohd-afeef.badri@cea.fr                                       
     Date     : 2021‑06‑18                                                    
                                                                              
     -------------------------------------------------------------------      
                                                                              
     PSD a parallel  finite  element framework  provides tools to  solve      
     multiple  solid-dynamic  problems; PSD is distributed  in  the hope      
     that it will be useful, but WITHOUT ANY WARRANTY; or  without  even      
     the implied warranty of  FITNESS  FOR  A  PARTICULAR  PURPOSE.           
                                                                              
*******************************************************************************/                                                                                                                                                                                                                                     
//  load    "PETSc"
    load    "./../../src/plugins/petsc/PETSc"
      
  mesh Th = square(10,10);   
  fespace Vh1 (Th, P1); fespace Vh0 (Th, P0);
  Vh1 u1 = x; Vh0 u0 = x;
  fespace Vhv1 (Th, [P1,P1]); fespace Vhv0 (Th, [P0,P0]);
  Vhv1 [uv11,uv12] = [x,y]; Vhv0 [uv01,uv02] = [x,y];  
  int[int] vtkorder0=[0];
  int[int] vtkorder1=[1];
  int[int] vtkordermixed=[1,0];  
  savevtk("squareP0-scalar.vtu",Th,u0,order=vtkorder0,dataname="u0");
  savevtk("squareP1-scalar.vtu",Th,u1,order=vtkorder1,dataname="u1");  
  savevtk("squareP0-vector.vtu",Th,[uv11,uv12],order=vtkorder0,dataname="u0");
  savevtk("squareP1-vector.vtu",Th,[uv01,uv02],order=vtkorder1,dataname="u1");
  savevtk("squareP1-mixed.vtu" ,Th,[uv01,uv02],u0,order=vtkordermixed,dataname="u1 u0");    
  
  load "msh3"
  mesh3 Th3 = cube(10,10,10);
  fespace Vh31 (Th3, P1); fespace Vh30 (Th3, P0);
  Vh31 u31 = x; Vh30 u30 = x;
  fespace Vh3v1 (Th, [P1,P1]); fespace Vh3v0 (Th, [P0,P0]);
  Vhv1 [uv311,uv312] = [x,y]; Vhv0 [uv301,uv302] = [x,y];  
  int[int] vtkorder30=[0];
  int[int] vtkorder31=[1];  
  savevtk("cubeP0-scalar.vtu",Th3,u30,order=vtkorder30,dataname="u0");
  savevtk("cubeP1-scalar.vtu",Th3,u31,order=vtkorder31,dataname="u1");   
  savevtk("cubeP0-vector.vtu",Th,[uv311,uv312],order=vtkorder0,dataname="u0");
  savevtk("cubeP1-vector.vtu",Th,[uv301,uv302],order=vtkorder1,dataname="u1");   
   
