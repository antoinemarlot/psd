//=====================================================================================
// ------ Building the BoundaryAndSourceConditions.edp file ------ 
//=====================================================================================

{ofstream  writebc("BoundaryAndSourceConditions.edp");

writebc
<<"										   \n"
<<"/************************ BoundaryAndSourceConditions **************************\n"
<<"*                                                                              *\n"
<<"* Note!!! This file is  generated  by running SolverGenerator.edp. Do not edit *\n"
<<"*         in order to  control this  file please change flag arguments of  the *\n"
<<"*         SolverGenerator, details of which are present in SolverGenerator.edp *\n"
<<"*         or in the README.MD file.                                            *\n"
<<"*                                                                              *\n"
<<"*******************************************************************************/\n"
<<"										   \n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Dirichlet and Neumann conditions-------				   \n"
<<"//==============================================================================\n"
<<"										   \n";

if(dirichletbc){writebc
<<"										   \n"
<<"//---Surface---//								   \n"
<<"  int [int]   Dlabel = ["+labelDirichlet+"];	// Vector of Dirichlet labels 	   \n";

if(spc==2)writebc
<<"  real[int]   Dvalue = [0.,0.];	// Vector of Dirichlet values	 	   \n";

if(spc==3)writebc
<<"  real[int]   Dvalue = [0.,0.,0.];	// Vector of Dirichlet values		   \n";

}  //-- [if loop terminator] dirichletbc ended --//

if(pointbc)writebc
<<"										   \n"
<<"//---Point---//								   \n"
<<"  int [int]   Dpointlab = [2];		// Vector of Dirichlet labels	   \n"
<<"  real[int]   PnV = [0., 0., 0., 0.];	// [x, y, u1, u2]		   \n"
<<"										   \n";

if(bodyforce){writebc
<<"										   \n"
<<"//---Body force---//								   \n";

if(spc==2)writebc
<<"										   \n"
<<"  macro BF [0,f2]			// Two component body forces	   	   \n"; 

if(spc==3)writebc
<<"										   \n"
<<"  macro BF [0,f2,0]			// Three component body forces	   	   \n"; 
      
}  //-- [if loop terminator] bodyforce ended --//

if(tractionbc){writebc
<<"										   \n"
<<"//---Neumann---//								   \n"
<<"  int [int]   Tlabel = [2];		// Vector containing Neumann labels	   \n";

if(spc==2)writebc
<<"  macro T [0,1]			// Two component traction forces	   \n"; 

if(spc==3)writebc
<<"  macro T [0,1,0]			// Three component traction forces	   \n"; 

}   //-- [if loop terminator] tractionbc ended --//


if(dynamic){writebc
<<"										   \n"
<<"//---dynamic loading function---//						   \n"
<<"										   \n"
<<"  real tt;									   \n"
<<"  func tr = (tt <= 0.8 ? real(1.*tt/0.8) : 0. );    // Traction tr		   \n"
<<"										   \n";
}   //-- [if loop terminator] dynamic ended --//

} //-- [ostream terminator]  varfmatsolve.edp closed --//
