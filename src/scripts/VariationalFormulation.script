//=====================================================================================
// ------ Building the VariationalFormulations.edp file ------ 
//=====================================================================================

{ofstream  writevarfmatsolve("VariationalFormulations.edp");

writevarfmatsolve
<<"										   \n"
<<"/**************************Variational formulation******************************\n"
<<"*                                                                              *\n"
<<"* Note!!! This file is  generated  by running SolverGenerator.edp. Do not edit *\n"
<<"*         in order to  control this  file please change flag arguments of  the *\n"
<<"*         SolverGenerator, details of which are present in SolverGenerator.edp *\n"
<<"*         or in the README.MD file.                                            *\n"
<<"*                                                                              *\n"
<<"*******************************************************************************/\n"
<<"										   \n"
<<"										   \n";

if(!nonlinear)if(!dynamic){writevarfmatsolve
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Variation formulation linear-------				   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"										   \n";

writevarfmatsolve
<<"										   \n"
<<"varf elast(def(u),def(v))							   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			lambda*divergence(u)*divergence(v)			   \n"
<<"			+2.*mu*( epsilon(u)'*epsilon(v) )			   \n"
<<"		  )								   \n";

if(bodyforce)writevarfmatsolve
<<"										   \n"
<<"	+ intN(Th,qforder=2)(BF'*def(v))	// Body force   (volumetric)	   \n";


if(tractionbc)writevarfmatsolve
<<"										   \n"
<<"	+ intN1(Th,Tlabel,qforder=2)(T'*def(v))	// Traction force (Neumann BC)	   \n";

if(dirichletbc){

if(spc==2)writevarfmatsolve
<<"										   \n"
<<"	+ on( Dlabel, 				// Displacement (Dirichlet)	   \n"
<<"		u  = Dvalue[0],							   \n"
<<"		u1 = Dvalue[1]							   \n"
<<"	    );		   		   		   			   \n"
<<"										   \n";

if(spc==3)writevarfmatsolve
<<"										   \n"
<<"	+ on(Dlabel,				// Displacement (Dirichlet)	   \n"
<<"		u  = Dvalue[0],							   \n"
<<"		u1 = Dvalue[1],							   \n"
<<"		u2 = Dvalue[2]			   				   \n"
<<"	    );		   							   \n"
<<"										   \n";

}  //-- [if loop terminator] dirichletbc ended --//

}  //-- [if loop terminator] !nonlinear ended --//

if(nonlinear)if(!vectorial)if(!dynamic){writevarfmatsolve
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Variation formulation nonlinear-------				   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"										   \n"
<<"  Vh  def2(u) , def2(uold)  ;	// Defining displacement FE variables 	   \n"
<<"  Vh1 phi , phiold          ;	// Damage field	FE variables	   	   \n"
<<"										   \n"
<<(energydecomp ? "  fespace Wh0(Th,P0);\n"  : "\n" 	    	    		    )
<<(energydecomp ? "  Wh0 H, Hplus,Hminus;\n" : "\n" 	    	    		    )
<<"										   \n"
<<"varf elast(def2(u),def2(v))							   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			((1 - phiold)*(1 - phiold) + 1e-6)*			   \n"
<<"			(lambda*divergence(u)*divergence(v)			   \n"
<<"			+ 2.*mu*( epsilon(u)'*epsilon(v) ))			   \n"
<<"			    )							   \n";

if(bodyforce)writevarfmatsolve
<<"	+ intN(Th,qforder=2)(BF'*def2(v))	// Body force     (volumetric)	   \n";

if(tractionbc)writevarfmatsolve
<<"	+ intN1(Th,Tlabel,qforder=2)(T'*def2(v))// Traction force (Neumann BC)	   \n";

if(dirichletbc){

if(spc==2)writevarfmatsolve
<<"	+ on(Dlabel,u=Dvalue[0],u1=Dvalue[1])	// Displacement (Dirichlet)	   \n"
<<"	+ on(2,u1=tr);				// Displacement (Dirichlet)	   \n"
<<"										   \n";

if(spc==3)writevarfmatsolve
<<"	+ on(Dlabel,u=Dvalue[0],u1=Dvalue[1]					   \n"
<<"				,u2=Dvalue[2])	// Displacement (Dirichlet)	   \n"
<<"	+ on(2,u1=tr);				// Displacement (Dirichlet)	   \n"
<<"										   \n";

}  //-- [if loop terminator] dirichletbc ended --//


/*
if(pipegnu)writevarfmatsolve
<<"										   \n"
<<"varf elastNoDirc(def2(u),def2(v))						   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			((1 - phiold)*(1 - phiold) + 1e-6)*			   \n"
<<"			(lambda*divergence(u)*divergence(v)			   \n"
<<"			+2.*mu*( epsilon(u)'*epsilon(v) ))			   \n"
<<"			    );							   \n";
*/


writevarfmatsolve
<<"										   \n"
<<"varf phase(phi,q)								   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			(Gc*lo*(grad(phi)'*grad(q))) +				   \n"
<<(energydecomp  ? "\t\t\t( ((Gc/lo)  + 2.*H)*phi*q )\n"         : "" 		    )
<<(!energydecomp ? "\t\t\t( ((Gc/lo)  + 2.*Hplus(u))*phi*q )\n"  : "" 		    )
<<"			    )							   \n"
<<(energydecomp  ? "\t+ intN(Th,qforder=2)(  2.*H*q  )\n"         : "" 	    	    )
<<(!energydecomp ? "\t+ intN(Th,qforder=2)(  2.*Hplus(u)*q  )\n"  : "" 	    	    )
<<"	+ on(4,phi=1);				// Already Cracked (Dirichlet)     \n";

}  //-- [if loop terminator] nonlinear ended --//


if(nonlinear)if(vectorial)if(!dynamic){writevarfmatsolve
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Variation formulation nonlinear-------				   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"										   \n"
<<"  Vh  def(u) , def(uold)  ;	// Defining vectorial FE variables 		   \n"
<<"										   \n"
<<(energydecomp ? "  fespace Wh0(Th,P0);\n"  : "\n" 	    	    		    )
<<(energydecomp ? "  Wh0 H, Hplus,Hminus;\n" : "\n" 	    	    		    )
<<"										   \n"
<<"varf elast(def(u),def(v))							   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			((1 - uold"+spc+")*(1 - uold"+spc+") + 1e-6)*		   \n"
<<"			(lambda*divergence(u)*divergence(v)			   \n"
<<"			+ 2.*mu*( epsilon(u)'*epsilon(v) ))			   \n"
<<"					+					   \n"
<<"			(Gc*lo*(grad(u"+spc+")'*grad(v"+spc+"))) +		   \n"
<<(!energydecomp  ? "\t\t\t( ((Gc/lo)  + 2.*Hplus(uold))*u"+spc+"*v"+spc+" )\n": "" )
<<(energydecomp   ? "\t\t\t( ((Gc/lo)  + 2.*H)*u"+spc+"*v"+spc+" )\n"          : "" )
//<<"			( ((Gc/lo)  + 2.*Hplus(uold))*u"+spc+"*v"+spc+" )	   \n"
<<"			    )							   \n"
<<(!energydecomp  ? "\t+ intN(Th,qforder=2)(  2.*Hplus(uold)*v"+spc+"  )\n": ""     )
<<(energydecomp   ? "\t+ intN(Th,qforder=2)(  2.*H*v"+spc+"  )\n"          : ""     )
//<<"	+ intN(Th,qforder=2)(  2.*Hplus(uold)*v"+spc+"  )			   \n"
<<"	+ on(4,u"+spc+" = 1)                        // Already Cracked (Dirichlet) \n";

if(dirichletbc){

if(spc==2)writevarfmatsolve
<<"	+ on(Dlabel,u=Dvalue[0],u1=Dvalue[1])	// Displacement (Dirichlet)	   \n"
<<"	+ on(2,u1=tr);				// Displacement (Dirichlet)	   \n"
<<"										   \n";

if(spc==3)writevarfmatsolve
<<"	+ on(Dlabel,u=Dvalue[0],u1=Dvalue[1]					   \n"
<<"				,u2=Dvalue[2])	// Displacement (Dirichlet)	   \n"
<<"	+ on(2,u1=tr);				// Displacement (Dirichlet)	   \n"
<<"										   \n";

}  //-- [if loop terminator] dirichletbc ended --//


/*
if(pipegnu)writevarfmatsolve
<<"										   \n"
<<"varf elastNoDirc([u,u1,u2],[v,v1,v2])					   \n"
<<"	= intN(Th,qforder=3)(							   \n"
<<"			((1 - uold2)*(1 - uold2) + 1e-6)*			   \n"
<<"			(lambda*divergence(u)*divergence(v)			   \n"
<<"			+ 2.*mu*( epsilon(u)'*epsilon(v) ))			   \n"
<<"			    );							   \n";
*/

}  //-- [if loop terminator] nonlinear vectorial ended --//


if(dynamic){writevarfmatsolve
<<"										   \n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Variation formulation dynamic linear-------			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"										   \n"
<<"  Vh  def(du)    ,      // Displacement FE field				   \n"
<<"      def(uold)  ,      // Previous iteration displacement FE field		   \n"
<<"      def(vold)  ,      // Previous iteration velocity FE field		   \n"
<<"      def(aold)  ,      // Previous iteration acceleration FE field		   \n"
<<"      def(Dspc)  ;      // Partition of unity field for integral		   \n"
<<"										   \n"
<<"varf elastodynamics( def(du) , def(v) )					   \n"
<<"										   \n"
<<"    = intN(Th,qforder=3)							   \n"
<<"  (										   \n"
<<"      (def(du)'*def(v))*c[0]							   \n"
<<"    + (divergence(du)*divergence(v))*c[1]					   \n"
<<"    + (epsilon(du)'*epsilon(v))*c[2]						   \n"
<<"  )										   \n"
<<"										   \n"
<<"    + intN(Th,qforder=3)							   \n"
<<"  (										   \n"
<<"      (def(uold)'*def(v))*c[0]						   \n"
<<"    + (def(vold)'*def(v))*c[3]						   \n"
<<"    + (def(aold)'*def(v))*c[4]						   \n"
<<"    - (divergence(uold)*divergence(v))*c[5]					   \n"
<<"    - (epsilon(uold)'*epsilon(v))*c[6]					   \n"
<<"    + (divergence(vold)*divergence(v))*c[7]					   \n"
<<"    + (divergence(aold)*divergence(v))*c[8]					   \n"
<<"    + (epsilon(vold)'*epsilon(v))*c[9]					   \n"
<<"    + (epsilon(aold)'*epsilon(v))*c[10]					   \n"
<<"  )										   \n"
<<"										   \n"
/*
<<"    = intN(Th,qforder=3)							   \n"
<<"  (										   \n"
<<"										   \n"
<<"   //  mass  matrix [M]du  //  						   \n"
<<"       rho*(1.-alpm)/(beta*dt*dt) *def(du)'*def(v)             		   \n"
<<"										   \n"
<<"   //  elastis [K]du       // 						   \n"
<<"     + lambda*(1.-alpf)*divergence(du)*divergence(v)                		   \n"
<<"     + 2.*mu*(1.-alpf)* epsilon(du)'*epsilon(v)                     		   \n"
<<"										   \n"
<<"   //  damping [C]du       //						   \n"
<<"     + (etam*rho*gamma*(1-alpf)/(beta*dt)) *def(du)'*def(v)         	           \n"
<<"     + (etak*gamma*(1-alpf)/(beta*dt)*lambda)*(divergence(du)*divergence(v))	   \n"
<<"     + (etak*gamma*(1-alpf)/(beta*dt) * 2.*mu)*(epsilon(du)'*epsilon(v))	   \n"
<<"										   \n" 
<<"  )										   \n"
<<"										   \n"
<<"    + intN(Th,qforder=3)							   \n"
<<"  (										   \n"
<<"										   \n"
<<"   //  mass  matrix [M]{uold+vold+aold}  //  				   \n"
<<"     + (rho*(1.-alpm)/(beta*dt*dt))  *def(uold)'*def(v)           		   \n"
<<"     + (rho*(1.-alpm)/(beta*dt) )    *def(vold)'*def(v)           		   \n"
<<"     + (rho*(1.-alpm)*(1.-2.*beta)/2./beta)*def(aold)'*def(v)     		   \n"
<<"     - rho*(alpm)*def(aold)'*def(v)                               		   \n"
<<"										   \n"
<<"   //  elastis [K]{uold+vold+aold}       // 					   \n"
<<"     - lambda*alpf*divergence(uold)*divergence(v)                 		   \n"
<<"     - 2.*mu*alpf* epsilon(uold)'*epsilon(v)                      		   \n"
<<"										   \n"
<<"   //  damping E_m[M]{uold+vold+aold}    //					   \n"
<<"										   \n"
<<"     + etam*rho*gamma*(1.-alpf)/(dt*beta)*def(uold)'*def(v)			   \n"
<<"     + etam*rho*(1-gamma*(1-alpf)/beta)*def(vold)'*def(v)			   \n"
<<"     + etam*rho*dt*(1.-alpf)*(1.-gamma/(2*beta))*def(aold)'*def(v)		   \n"
<<"										   \n"
<<"   //  damping E_k[K]{uold+vold+aold}    //					   \n"
<<"										   \n"
<<"     + (etak*gamma*(1.-alpf)/(beta*dt)*lambda)*(divergence(uold)*divergence(v)) \n"
<<"     + (etak*gamma*(1.-alpf)/(beta*dt)*2.*mu)*(epsilon(uold)'*epsilon(v))	   \n"
<<"     + (etak*(gamma*(1.-alpf)/beta)*lambda)*(divergence(vold)*divergence(v))    \n"
<<"     + (etak*(gamma*(1.-alpf)/beta)*2.*mu)*(epsilon(vold)'*epsilon(v))	   \n"
<<"     - (etak*lambda)*(divergence(vold)*divergence(v))			   \n"
<<"     - (etak*2.*mu)*(epsilon(vold)'*epsilon(v))				   \n"
<<"     - (etak*dt*(1.-alpf)*(1.-gamma)*lambda)*(divergence(aold)*divergence(v))   \n"
<<"     - (etak*dt*(1.-alpf)*(1.-gamma)*2.*mu)*(epsilon(aold)'*epsilon(v))	   \n"
<<"+ (etak*dt*(1.-alpf)*(1.-2*beta)/2./beta*lambda)*(divergence(aold)*divergence(v))\n"
<<"     + (etak*dt*(1.-alpf)*(1.-2*beta)/2./beta*2.*mu)*(epsilon(aold)'*epsilon(v))\n"
<<"										   \n"
<<"  )										   \n"
*/
<<"										   \n"
<<"    + intN1(Th,qforder=3,"+labRface+")					   \n"
<<"  (										   \n"
<<"     tr * v1                                           // Time dependent loading\n"
<<"  )										   \n"
<<"										   \n"
<<"    + on                                                                        \n"
<<"  (										   \n"
<<"         "+labLface+"        ,                        // Constrain  (Dirichlet) \n"
<<"         du  = 0  ,		      	              				   \n"
<<"         du1 = 0								   \n"
<<"  )		   								   \n"
<<";										   \n"
<<"										   \n";

}  //-- [if loop terminator] dynamic Sequential ended --//

} //-- [ostream terminator]  varfmatsolve.edp closed --//
