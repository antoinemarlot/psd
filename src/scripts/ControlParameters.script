//=====================================================================================
// ------ Building the Parameters.edp file ------ 
//=====================================================================================

{ofstream  writemeshParameters("ControlParameters.edp");

writemeshParameters
<<"										   \n"
<<"/***********************************Parameters**********************************\n"
<<"*                                                                              *\n"
<<"* Note!!! This file is  generated  by running SolverGenerator.edp. Do not edit *\n"
<<"*         in order to  control this  file please change flag arguments of  the *\n"
<<"*         SolverGenerator, details of which are present in SolverGenerator.edp *\n"
<<"*         or in the README.MD file.                                            *\n"
<<"*                                                                              *\n"
<<"*******************************************************************************/\n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Mesh parameters (Un-partitioned) ------- 				   \n"
<<"//==============================================================================\n";


if(!nonlinear)if(!dynamic)if(!quasistatic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/bar\";  // Mesh  name 	   	   \n";

if(nonlinear)if(!dynamic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/tensile-crack\"; // Mesh  name	   \n";

if(dynamic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/bar-dynamic\"; // Mesh  name  	   \n";

if(quasistatic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/quasistatic\"; // Mesh  name    	   \n";

if(!nonlinear)if(!dynamic)if(!quasistatic){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Material parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n";

if(fastmethod)writemeshParameters
<<"  real    mu                        // Lame parameter			   \n"
<<"         ,lambda                    // Lame parameter			   \n"
<<(bodyforce ? "         ,f2                         // Force in Y    \n" : ""	    )
<<"         ;	   								   \n"
<<"										   \n"
<<"{										   \n"
<<"  real E  = 200.e9  ,			// Modulus of Elasticity - [Pa]	   \n"
<<"       nu = 0.3     ;			// Poisson ratio - [-]		   \n"
<<"	 									   \n"
<<"  mu     = E/(2.*(1.+nu))            ;					   \n"
<<"  lambda = E*nu/((1.+nu)*(1.-2.*nu)) ;					   \n"
<<"	 									   \n"
<<(bodyforce ? "  f2 = 8.e3*(-9.81);				// Rho*g" : ""	   )
<<" 										   \n"
<<"}	 									   \n";

if(!fastmethod){writemeshParameters
<<(bodyforce ? "  real f2= 8.e3*(-9.81);                     // Force in Y\n" : "" )
<<"										   \n"
<<"  real a1,a2,a3        ;                     // Building material tensor	   \n"
<<"{										   \n"
<<"  real E  = 200.e9     ,                     // Modulus of Elasticity - [Pa]	   \n"
<<"       nu = 0.3        ;                     // Poisson ratio - [-]		   \n"
<<"	 									   \n"
<<"       a1 = E*(1.-nu)/((1.+nu)*(1.-2.*nu))   ;				   \n"
<<"       a2 = a1*nu/(1.-nu)                    ;				   \n"
<<"       a3 = E/(2*(1.+nu))                    ;				   \n"
<<"}	 									   \n";

if(spc==2)writemeshParameters
<<"										   \n"
<<"  macro Mt   [[ a1 ,  a2 , 0 ],						   \n"
<<"              [ a2 ,  a1 , 0 ],						   \n"
<<"              [ 0  ,  0  , a3]]               // Material tensor		   \n";

if(spc==3)writemeshParameters
<<"										   \n"
<<"  macro Mt   [[ a1 ,  a2 , a2 , 0  , 0  , 0 ],				   \n"
<<"              [ a2 ,  a1 , a2 , 0  , 0  , 0 ],				   \n"
<<"              [ a2 ,  a2 , a1 , 0  , 0  , 0 ],     				   \n"
<<"              [ 0  ,  0  , 0  , a3 , 0  , 0 ],      				   \n"
<<"              [ 0  ,  0  , 0  , 0  , a3 , 0 ],     				   \n"
<<"              [ 0  ,  0  , 0  , 0  , 0  , a3]]// Material tensor		   \n";
}}

if(quasistatic)writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Material parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real    mu                        // Lame parameter			   \n"
<<"         ,lambda                    // Lame parameter			   \n"
<<"         ,kappa0 = 1.e-4            // Damage initiation threshold		   \n"
<<"         ,kappac = 1.e-3            // Critical strain level			   \n"
<<(bodyforce ? "         ,f2                         // Force in Y    \n" : ""	    )
<<"         ;	   								   \n"
<<"										   \n"
<<"{										   \n"
<<"  real E  = 100.e6  ,              // Modulus of Elasticity - [Pa]	   	   \n"
<<"       nu = 0.2     ;              // Poisson ratio - [-]		   	   \n"
<<"	 									   \n"
<<"  mu     = E/(2.*(1.+nu))            ;					   \n"
<<"  lambda = E*nu/((1.+nu)*(1.-2.*nu)) ;					   \n"
<<"	 									   \n"
<<(bodyforce ? "  f2 = 8.e3*(-9.81);              // Rho*g" : ""	   	   )
<<" 										   \n"
<<"}	 									   \n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Solver parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real tol      = 1.e-5 ;          // Tolerance of the NR procedure	   	   \n"
<<"										   \n"
<<"  int npas      = 2000  ,          // # of pseudo-time steps		   	   \n"
<<"      iterMaxNR = 10    ;          // Max # of iterations for the NR loop       \n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Loading parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"  real Duimp = 2.e-7,              // Imposed displacement variation		   \n"
<<"       duimp        ;              // Dummy Imposed displacement variation      \n";


if(nonlinear){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Material parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real lambda = 121.15e3 ,							   \n"
<<"       mu     = 80.77e3  ;							   \n"
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Nonlinear parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"	 									   \n"
<<"  real Gc    = 2.7  ,							   \n"
<<"       lfac  = 2.0  ,							   \n"
<<"       maxtr = 7e-3 ,							   \n"
<<"       tr    = 1e-5 ,							   \n"
<<"       dtr   = 1e-5 ,							   \n"
<<"       lo           ;	// Calculated in OtherParameters.edp		   \n";
}



if(dynamic){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Material parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real lambda = 576.9230769  ,           // E=1000. & nu=0.3			   \n"
<<"       mu     = 384.6153846  ;           // E=1000. & nu=0.3			   \n"
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Dynamic parameters ------- 	 			   	   \n"
<<"//==============================================================================\n"
<<"	 									   \n"
<<"  real rho  = 1.0  ,								   \n"
<<"       etam = 0.01 ,								   \n"
<<"       etak = 0.01 ,								   \n"
<<"       alpm = 0.2  ,								   \n"
<<"       alpf = 0.4  ,								   \n"
<<"       tmax = 4.0  ,								   \n"
<<"       t    = 0.08 ,								   \n"
<<"       dt   = 0.08 ;								   \n"
<<"	 									   \n"
<<"  real gamma = 0.5 + alpf - alpm         ,					   \n"
<<"       beta  = (1./4.)*(gamma+0.5)^2     ;					   \n"
<<"	 									   \n";
}


if(dirichletbc)if(!quasistatic){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// -------Dirichlet boundary-condition parameters-------			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  int [int]   Dlabel = ["+labelDirichlet+"];	\t// Vector of Dirichlet labels    \n";

if(spc==2)writemeshParameters
<<"										   \n"
<<"  real[int]   Dvalue = [0.,0.];	// Vector of Dirichlet values	 	   \n";

if(spc==3)writemeshParameters
<<"										   \n"
<<"  real[int]   Dvalue = [0.,0.,0.];	// Vector of Dirichlet values		   \n";

if(pointbc)writemeshParameters
<<"										   \n"
<<"//---Point---//								   \n"
<<"  int [int]   Dpointlab = [2];		// Vector of Dirichlet labels	   \n"
<<"  real[int]   PnV = [0., 0., 0., 0.];	// [x, y, u1, u2]		   \n"
<<"										   \n";
}

if(tractionbc){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Neumann boundary-condition parameters -------			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  int [int]   Tlabel = [2];		// Vector containing Neumann labels	   \n";

if(spc==2)writemeshParameters
<<"  macro T [0,1]			// Two component traction forces	   \n"; 

if(spc==3)writemeshParameters
<<"  macro T [0,1,0]			// Three component traction forces	   \n"; 
}

if(dynamic)writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Neumann boundary-condition parameters -------			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real tt;									   \n"
<<"  func tr = (tt <= 0.8 ? real(1.*tt/0.8) : 0. );    // tr is dynamic loading	   \n"
<<"										   \n";


if(bodyforce){writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Bodyforce  parameters -------					   \n"
<<"//==============================================================================\n"
<<"										   \n";

if(spc==2)writemeshParameters
<<"										   \n"
<<"  macro BF [0,f2]			// Two component body forces	   	   \n"; 

if(spc==3)writemeshParameters
<<"										   \n"
<<"  macro BF [0,f2,0]			// Three component body forces	   	   \n"; 
}

writemeshParameters
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Solver control parameters ------- 	 			   \n"
<<"//==============================================================================\n"
<<"	 	// TO DO							   \n"
<<"	 									   \n";

} //-- [ostream terminator]  parameters.edp closed --//
