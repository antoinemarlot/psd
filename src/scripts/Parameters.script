//=====================================================================================
// ------ Building the Parameters.edp file ------ 
//=====================================================================================

{ofstream  writemeshParameters("Parameters.edp");

writemeshParameters
<<"										   \n"
<<"/***********************************Parameters**********************************\n"
<<"*                                                                              *\n"
<<"* Note!!! This file is  generated  by running SolverGenerator.edp. Do not edit *\n"
<<"*         in order to  control this  file please change flag arguments of  the *\n"
<<"*         SolverGenerator, details of which are present in SolverGenerator.edp *\n"
<<"*         or in the README.MD file.                                            *\n"
<<"*                                                                              *\n"
<<"*******************************************************************************/\n"
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- FEM mesh to be loaded (Un-partitioned) ------- 			   \n"
<<"//==============================================================================\n";


if(!nonlinear)if(!dynamic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/bar\";  // Mesh file name 	   	   \n";

if(nonlinear)if(!dynamic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/tensile-crack\"; // Mesh file name	   \n";

if(dynamic)writemeshParameters
<<"										   \n"
<<"  string ThName = \"../Meshes/"+spc+"D/bar-dynamic\"; // Mesh file name  	   \n";


writemeshParameters
<<"										   \n"
<<"//==============================================================================\n"
<<"// ------- Material properties ------- 		 			   \n"
<<"//==============================================================================\n"
<<"										   \n"
<<"  real    mu                         // Lame parameter			   \n"
<<"         ,lambda                     // Lame parameter			   \n"
<<(bodyforce ? "         ,f2                         // Force in Y    \n" : ""	    )
<<(timelog   ? "         ,t0                         // Time variable \n" : ""	    )
<<(timelog   ? "         ,t1                         // Time variable \n" : ""	    )
<<"         ;	   								   \n"
<<"										   \n"
<<"{										   \n"
<<"  real E  = 200.e9  ,			// Modulus of Elasticity - [Pa]	   \n"
<<"       nu = 0.3     ;			// Poisson ratio - [-]		   \n"
<<"	 									   \n"
<<"  mu     = E/(2.*(1.+nu))            ;					   \n"
<<"  lambda = E*nu/((1.+nu)*(1.-2.*nu)) ;					   \n"
<<"	 									   \n"
<<(bodyforce ? "  f2 = 8.e3*(-9.81);				// Rho*g" : ""	   )
<<" 										   \n"
<<"	 									   \n"
<<"}	 									   \n";



if(nonlinear)writemeshParameters
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Nonlinear parameters ------- 		 			   \n"
<<"//==============================================================================\n"
<<"	 									   \n"
<<"real Gc    = 2.7  ,								   \n"
<<"     lfac  = 2.0  ,								   \n"
<<"     maxtr = 7e-3 ,								   \n"
<<"     tr    = 1e-5 ,								   \n"
<<"     dtr   = 1e-5 ,								   \n"
<<"     lo           ;								   \n"
<<"	 									   \n"
<<"     lambda = 121.15e3 ;							   \n"
<<"     mu     = 80.77e3  ;							   \n";


if(nonlinear)if(plotAll)writemeshParameters
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Plotting support variables ------- 	 			   \n"
<<"//==============================================================================\n"
<<"	 									   \n"
<<"  int iterout  = 0 ,               // Loop Counter			    	   \n"
<<"      iterout1 = 0 ;		      // Loop Counter				   \n"
<<"										   \n";


if(dynamic)writemeshParameters
<<"	 									   \n"
<<"//==============================================================================\n"
<<"// ------- Dynamic parameters ------- 	 			   	   \n"
<<"//==============================================================================\n"
<<"	 									   \n"
<<"real rho  = 1.0  ,								   \n"
<<"     etam = 0.01 ,								   \n"
<<"     etak = 0.01 ,								   \n"
<<"     alpm = 0.2  ,								   \n"
<<"     alpf = 0.4  ,								   \n"
<<"     tmax = 4.0  ,								   \n"
<<"     t    = 0.08 ,								   \n"
<<"     dt   = 0.08 ;								   \n"
<<"	 									   \n"
<<"real gamma = 0.5 + alpf - alpm         ,					   \n"
<<"     beta  = (1./4.)*(gamma+0.5)^2     ;					   \n"
<<"     lambda = 576.9230769  ;			// E=1000. & nu=0.3		   \n"
<<"     mu     = 384.6153846  ;			// E=1000. & nu=0.3		   \n"
<<"	 									   \n"
<<"real[int] c(11);								   \n"
<<"	 									   \n"
<<"  c[0] =   rho*(1.-alpm)/(beta*dt*dt) + etam*rho*gamma*(1-alpf)/beta/dt        ;\n"
<<"  c[1] =   lambda*(1.-alpf) + lambda*etak*gamma*(1-alpf)/beta/dt               ;\n"
<<"  c[2] =   2.*mu*(1.-alpf) + 2.*mu*etak*gamma*(1-alpf)/beta/dt                 ;\n"
<<"  c[3] =   rho*(1.-alpm)/beta/dt + etam*rho*(1-gamma*(1-alpf)/beta)            ;\n"
<<"  c[4] =   rho*( (1.-alpm)*(1.-2.*beta)/2./beta - alpm + etam*dt*(1.-alpf)*(1.-gamma/2/beta))   ;\n"
<<"  c[5] =   lambda*alpf -    lambda*etak*gamma*(1.-alpf)/beta/dt                ;\n"
<<"  c[6] =   2*mu*alpf   -    2.*mu*etak*gamma*(1.-alpf)/beta/dt                 ;\n"
<<"  c[7] =   etak*lambda*(gamma*(1.-alpf)/beta - 1)                              ;\n"
<<"  c[8] =   etak*lambda*dt*(1.-alpf)*((1.-2*beta)/2./beta - (1.-gamma))         ;\n"
<<"  c[9] =   etak*2*mu*(gamma*(1.-alpf)/beta -1)                                 ;\n"
<<"  c[10]=   etak*2*mu*dt*(1.-alpf)*((1.-2*beta)/2./beta -(1.-gamma))            ;\n"
<<"	 									   \n";



} //-- [ostream terminator]  parameters.edp closed --//
