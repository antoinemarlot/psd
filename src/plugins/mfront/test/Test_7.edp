/*****************************************************************************
                                                                              
         This file is a part of PSD (Parallel Structural Dynamics)            
                                                                              
     -------------------------------------------------------------------      
                                                                              
     Author(s): Mohd Afeef Badri                                              
     Email    : mohd-afeef.badri@cea.fr                                       
     Date     : 2021‑07‑29                                                    
     Comment  : This test checks the MFrontParameter routine provided
                in the mfront plugin of PSD works well
                                                                                              
     -------------------------------------------------------------------      
                                                                              
     PSD a parallel  finite  element framework  provides tools to  solve      
     multiple  solid-dynamic  problems; PSD is distributed  in  the hope      
     that it will be useful, but WITHOUT ANY WARRANTY; or  without  even      
     the implied warranty of  FITNESS  FOR  A  PARTICULAR  PURPOSE.           
                                                                              
*******************************************************************************/                                                                                                                                                                                                                                     
  load    "../cpp/mfront"
  load    "Element_QF"
  
  mesh Th = square(2,2);
  
  // Quadrature space with 6 elements for Material tensor
  fespace Mh  ( Th , [FEQF2,FEQF2,FEQF2,FEQF2,FEQF2,FEQF2] );
  Mh [Mt11,Mt12,Mt13,Mt22,Mt23,Mt33];

  // Quadrature space with 3 elements for stress and strain tensor
  fespace Sh  ( Th , [FEQF2,FEQF2,FEQF2] );
  Sh [Eps11,Eps22,Eps12];
  Sh [Sig11,Sig22,Sig12];  
  
  [Eps11,Eps22,Eps12] = [1., 1., 1.]; // Dummy strain 
  
  string    PropertyNames   = "YoungModulus PoissonRatio";
  real[int] PropertyValues  = [ 150, 0.3   ];  
  
  mfrontElasticityHandler( "Elasticity"                                        , 
                           mfrontBehaviourHypothesis = "GENERALISEDPLANESTRAIN",
                           mfrontPropertyNames       = PropertyNames           ,
                           mfrontPropertyValues      = PropertyValues          ,
                           mfrontMaterialTensor      = Mt11[]                  ,
                           mfrontStrainTensor        = Eps11[]                 ,       
                           mfrontStressTensor        = Sig11[]                                                                                              
                         );
  
  real epsilon = 1e-9;
  real MtRef11 = 201.92307692307690558664035052061 ,
       MtRef12 = 86.538461538461532995825109537691 ,
       MtRef13 = 0                                 ,
       MtRef22 = 201.92307692307690558664035052061 ,
       MtRef23 = 0                                 ,
       MtRef33 = 57.692307692307693400834978092462 ;  


  real SigxxRef = 288.46153846153845279332017526031 ,
       SigyyRef = 288.46153846153845279332017526031 ,
       SigxyRef = 115.38461538461538680166995618492 ; 
          
  int prec = cout.precision(32);   
  assert( abs(Mt11[][0]-MtRef11) <= epsilon  &&
          abs(Mt11[][1]-MtRef12) <= epsilon  &&
          abs(Mt11[][2]-MtRef13) <= epsilon  &&
          abs(Mt11[][3]-MtRef22) <= epsilon  &&
          abs(Mt11[][4]-MtRef23) <= epsilon  &&
          abs(Mt11[][5]-MtRef33) <= epsilon                                        
        );


  assert( abs(Sig11[][0]-SigxxRef) <= epsilon  &&
          abs(Sig11[][1]-SigyyRef) <= epsilon  &&
          abs(Sig11[][2]-SigxyRef) <= epsilon                                          
        );
 
 
  cout << " ================================================== " << endl;
  cout << "      MATERIAL TENSOR CALUCLATED BY MFRONT          " << endl;
  cout << " ================================================== " << endl;
  cout << "                                                    " << endl;       
  cout << " Mt11[0] " << Mt11[][0] << endl;  
  cout << " Mt11[1] " << Mt11[][1] << endl; 
  cout << " Mt11[2] " << Mt11[][2] << endl;
  cout << " Mt11[3] " << Mt11[][3] << endl;
  cout << " Mt11[3] " << Mt11[][4] << endl;
  cout << " Mt11[3] " << Mt11[][5] << endl;
  cout << "                                                    " << endl;         
  cout << " ================================================== " << endl; 
          
  cout << " ================================================== " << endl;
  cout << "      STRESS TENSOR CALUCLATED BY MFRONT          " << endl;
  cout << " ================================================== " << endl;
  cout << "                                                    " << endl;       
  cout << " Sigxx " << Sig11[][0] << endl;  
  cout << " Sigyy " << Sig11[][1] << endl; 
  cout << " Sigxy " << Sig11[][2] << endl;
  cout << "                                                    " << endl;         
  cout << " ================================================== " << endl;   
                             /**/
