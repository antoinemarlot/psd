@DSL ImplicitII;
@Behaviour desmorat20152d;
@Author Breno Ribeiro Nogueira, Flavien Loiseau;
@Date 20 / 02 / 2023;

@Theta 1.;

@Includes{
  #include "TFEL_MatrixFunc.hxx"
}

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real B;
B.setEntryName("Brittleness");
@MaterialProperty real k0;
k0.setEntryName("Kappa0");
@MaterialProperty real S;
S.setEntryName("BigS");
@MaterialProperty real s;
s.setEntryName("SmallS");

// H-Id
@StateVariable Stensor rH; //Ladeveze variable minus identity
//@StateVariable Stensor d;  //Damage tensor
//@StateVariable Stensor g;  //Metric tensor
//@StateVariable Stensor ig;  //Inverse of the Metric tensor
//@StateVariable real detg;  //determinant Metric tensor

@AuxiliaryStateVariable Stensor d;
@AuxiliaryStateVariable strain ey;

//Bulk and shear modulus
@LocalVariable stress K;
@LocalVariable stress G;
@LocalVariable Stensor sig_n;



//Plane strain hypothesis
@ModellingHypothesis PlaneStrain;

// Define constant local variables
@LocalVariable stensor<2u,real>  I2;

@InitLocalVariables{
    // Define constants
    I2(0) = 1.;
    I2(1) = 1.;
    I2(2) = 0.;
    I2(3) = 0.;
    K = (young) / (2. * (1. - nu));
    G = computeMu(young, nu);    
}

@Predictor {
  const auto e = eval(eto+deto);
  const auto tr_e = e|I2;
  const auto H = rH + I2;
  const auto iH = tfel::math::extensions::myInvert(eval(H));
  const auto iH2 = square(iH);
  const auto tr_iH2 = (iH2|I2);
 
  if (tr_e > 0) {
    const auto tr_H2 = H | H;
    sig_n = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          2. * K / tr_H2 * tr_e * I2;
  } else {
    sig_n = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          K * tr_e * I2;
  }
  
}

@Integrator{
  // total strain at the end of the time step
  const auto e = eval(eto + deto);
  const auto tr_sig = sig_n|I2;
  
  // approximation: the triaxilaty is assumed to be constant
  const auto Rv = [&tr_sig, this] {
    if (tr_sig > 0) {
      return min(real(1), B);
    }
    const auto sigpri2d = sig_n - 1./2. * tr_sig * I2;
    const auto seq = sqrt(2*(sigpri2d|sigpri2d));
    if (seq > 1e-12 * young) {
      const auto Tx = tr_sig / (2. * seq);
      const auto Rv1 = 1. + 9. * (1. - 2. * nu) / (2. * (1. + nu)) * Tx * Tx;
      return min(Rv1, B);
    }
    return B;
  }();

  // positive part of the strain
  const auto ep = positive_part(e);
  // Mazars' equivalent strain
  const auto e_mazars = sqrt(ep | ep);
  // damage evolution
  const auto Rv_s = pow(Rv, s);
  
  //rH = eval(rH+drH);// does not work for compression
  
  //const auto imetric = Stensor::Id() - d;
  //const auto metric = invert(imetric);
  const auto tr_rH = rH|I2; // computed at step n with old rH

  // yield strain
  ey = k0 + S * Rv_s * tr_rH;
  if (e_mazars > ey) {
    const auto tr_sig = sig_n|I2;
    const auto et = (-nu / young) * tr_sig * I2 + ((1 + nu) / young) * sig_n; //computed at n or n+1 ?
    // positive part of the strain
    const auto etp = positive_part(et);
    // updated trace of H-I value so e_mazars=ey
    const auto ntr_rH = (e_mazars - k0) / (S * Rv_s); 
    // lagrange multiplier
    const auto dl = (ntr_rH - tr_rH) / (max(etp|I2,strain(1e-14)));
    // updating the Ladeveze damage variable
    frH -= dl*etp; 
  }

  const auto tr_e = e|I2;
  const auto H = rH + I2;
  const auto iH = tfel::math::extensions::myInvert(eval(H));
  const auto iH2 = square(iH);
  const auto tr_iH2 = (iH2|I2);

  if (tr_e > 0) {
    const auto tr_H2 = H | H;
    sig = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          2. * K / tr_H2 * tr_e * I2;
  } else {
    sig = 2. * G * (symmetric_product_aba(iH, e) - (iH2 | e) * iH2 / tr_iH2) +
          K * tr_e * I2;
  }
  
}

@UpdateAuxiliaryStateVariables{
  // computing the stress
  const auto H = rH + I2;
  const auto iH = tfel::math::extensions::myInvert(eval(H));
  const auto iH2 = square(iH); 
  //updating damage variable
  d = I2 - iH2;
}


@TangentOperator{
  const auto e =eval(eto+deto);
  const auto tr_e = e|I2;
  
  // computing H
  const auto H = rH + I2;
  const auto iH = tfel::math::extensions::myInvert(eval(H));
  const auto iH2 = square(iH);
  const auto tr_iH2 = (iH2|I2);

  if (tr_e > 0) {
    const auto tr_H2 = H | H;   
    Dt = 2. * G*(symmetric_product_derivative_daba_db(iH)- (iH2^iH2)/tr_iH2) + 2. * K / tr_H2 * (I2^I2);
   // Dt = 2. * G*(symmetric_product_derivative_daba_db(I2)- (I2^I2)/2) +  K * (I2^I2);
  } else {
    Dt = 2. * G*(symmetric_product_derivative_daba_db(iH)- (iH2^iH2)/tr_iH2) +  K * (I2^I2);
    //Dt = 2. * G*(symmetric_product_derivative_daba_db(I2)- (I2^I2)/2) +  K * (I2^I2);
  }

}
