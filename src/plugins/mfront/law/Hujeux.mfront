//=======================================================================================
//@DSL DefaultDSL;
//@DSL Implicit;
@DSL DefaultGenericBehaviour;
@Behaviour Hujeux;
@Date 10-05-2022;
@Description{

 Hujeux behaviour model is a cyclic constitutive law for non-linear soil behaviour.
 the model comprises a nonlinear elasticity controlled by  the  Young  modulus that
 depends on the confining pressure.

 Reference:
 J. C. Hujeux, A constitutive law for the cyclic loading of the soils.
 Parasismique genius Presses ENPC, Davidovici V. & al., pages 287-302, 1985

 D. Aubry , J.C. Hujeux, F. Lassoudiere & Y. Meimon, A doubles memory
 multiple model with mechanisms for cyclic soil behaviors,
 Int. Symp. Num. Models in Geomechanics, Zurich, vol. 1, pp 3-13, (1982).

}
//=======================================================================================


@ModellingHypotheses{PlaneStrain, Axisymmetrical, Tridimensional};

//! Strain tensor $\epsilon$
@Gradient StrainStensor eto;
eto.setGlossaryName("Strain");

//! Stress tensor $\sigma$
@Flux StressStensor sig;
sig.setGlossaryName("Stress");

//! this is a boolean parameter which controls the verbosity.
//! Intended to use for debugging.
@Parameter psdVerbosity = 0;
psdVerbosity.setEntryName("psdVerbosity");

//! $K_i$ is the modulus of compressibility
@Parameter K_i = 628.e6;
K_i.setEntryName("K_i");

//! $G_i$ is the shear modulus
@Parameter G_i = 290.e6;
G_i.setEntryName("G_i");

//! $ne\in[0,1]$ is the non-linear elastic characteristic
//! $ne = 0$ corresponds to linear elasticity
@Parameter ne = 0.5;
ne.setEntryName("ne");

//! Friction angle at perfect plasticity (in degrees)
@Parameter phi_pp = -33;
phi_pp.setEntryName("phi_pp");

//! Characteristic State Line or dilatancy angle $\psi$ (in degrees)
//! between th contracting field $p$ and dilating filed $q$:
//! $q = |p|\cdot \sin(\psi)$
@Parameter psi = -33;
psi.setEntryName("psi");

//! volumetric coefficient of plastic compressibility ($\beta > 0$)
@Parameter beta = 33;
beta.setEntryName("beta");

//! Initial Critical Pressure (or pre-consolidation stress) $p_{c0} < 0$
@Parameter p_c0 = -50.e3;
p_c0.setEntryName("p_c0");

//!  Volumetric monotonous hardening coefficient ($a_{m} > 0$)
@Parameter a_m = 0.0025;
a_m.setEntryName("a_m");

//! Deviatoric cyclic hardening coefficient ($a_{c} > 0$)
@Parameter a_c =  0.00001;
a_c.setEntryName("a_c");

//! $b\in[0,1]$ Shape coefficient
//! $b=0$ i.e Mohr-Coulomb and $b=1$  modified Cam-Clay
@Parameter b =  0.20 ;
b.setEntryName("b");

@Parameter alfa = 1.0;
alfa.setEntryName("alfa");

//! Elastic Domain Limit (deviatoric hardening coef $r_{ela} \in ]0,1]$ )
@Parameter r_ela = 0.03;
r_ela.setEntryName("r_ela");

//! Hysteretic Domain Limit (deviatoric hardening coef $r_{hys} \in ]0,1]$)
@Parameter r_hys =  0.04;
r_hys.setEntryName("r_hys");

//! Mobilized Domain Limit (deviatoric hardening coef $r_{mob} \in ]0,1]$)
@Parameter r_mob =  0.80;
r_mob.setEntryName("r_mob");

//! Volumetric monotonous hardening coefficient ($c_{m} > 0$)
@Parameter c_m = 0.004;
c_m.setEntryName("c_m");

//! Volumetric cylic hardening coefficient ($c_{c} > 0$)
@Parameter c_c = 0.002;
c_c.setEntryName("c_c");

//! Distance in e-lnp plane between Isotropic Consolidation and Critical State Lines
@Parameter d =  2.0;
d.setEntryName("d");

//! Elastic Domain Limit (volumetric hardening coef)
@Parameter dltela =  0.02;
dltela.setEntryName("dltela");

@Parameter xkimin = 0;
xkimin.setEntryName("xkimin");

@Parameter m = 1.0;
m.setEntryName("m");

//! integration reduction at group level
@Parameter facinc = 0.2;
facinc.setEntryName("facinc");

//! hypothesis variable of Hujeux group level
@Parameter iecoul = 1;
iecoul.setEntryName("iecoul");

//! integration variable max iteration at group level
@Parameter incmax = 50;
incmax.setEntryName("incmax");

@Parameter Kaux = 628.e6;
Kaux.setEntryName("Kaux");

@Parameter Gaux = 290.e6;
Gaux.setEntryName("Gaux");

//------------------- TO DO ------------------------------//
// @Evelyne: pref and indaux  seem to be orphan parameters
// I did not find them in the original Hujeux test can you
// confirm what is their use
//--------------------------------------------------------//

/*!Factor reduction on law integration increments */
//@Parameter pref = -1.e6;
//pref.setEntryName("pref");

/*!
Indicator for auxiliary tangent operator type
 *   0 = elastic (symmetric) => default
 *   1 = plastic (unsymmetric)
*/

@Parameter indaux = 0;
indaux.setEntryName("indaux");


@Private{

  void convert_stensor_to_mfront(StrainStensor& STensor){
    for(int i=0; i<6; i++)
      STensor[i] = STensor[i]*tfel::math::Cste<real>::isqrt2;
  }

  void print(std::string pp) const{
      std::cout << pp << std::endl;
  }

  void display(std::string pp, unsigned int aa) const{
      std::cout << pp <<  aa << std::endl;
  }

  void display(std::string pp, int aa) const{
      std::cout << pp <<  aa << std::endl;
  }

  void display(std::string pp, double aa) const{
      std::cout <<  std::setprecision(16)  << pp <<  aa << std::endl;
  }

  void display(std::string pp, long double aa) const{
      std::cout <<  std::setprecision(32) << pp <<  aa << std::endl;
  }

}

@Includes{
#include "stdafx.h"
#include "utils.h"
#include "hujeux.h"
}
@Sources {
#include "utils.cpp"
#include "hujeux.cpp"
}

//! A vector to 24 parameters for hujeux
@StateVariable real hujxIsv[24];
hujxIsv.setEntryName("hujeuxInternalStateVariables");

//! previous step stress  ---- I DOUBT it is a InternalStateVariables
//@StateVariable Stensor dSig;

//! plastic strain  ---- I DOUBT it is a InternalStateVariables
@StateVariable Stensor epsP;

//! variable to control initilization ----- FIND ANOTHER WAY TO DO THIs
@StateVariable real InitStressH;

/*
//-------------------------------
// USED IN @DSL DefaultDSL; mode
//-------------------------------
@InitLocalVariables {
  if(!sig[0])
  {
    print("Entering InitLocalVariables for stress initilization ");

    for(int i = 0; i < 3; i++)
      sig[i] = p_c0;

    for(int i = 3; i < 6; i++)
      sig[i] = 0.;
  }

  if(psdVerbosity)
  {
    display("initial compressibility modulus       :: K_0    = ", K_0  );
    display("initial shear modulus                 :: G_0    = ", G_0  );
    display("nonlinear elastic characteristic      :: ne     = ", ne   );
    display("dilatancy angle  (in radians)         :: psi    = ", psi  );
    display("coef. of plastic compressibility      :: beta   = ", beta );
    display("initial critical pressure             :: p_c0   = ", p_c0 );
    display("volumetric monotonous hardening coef. :: a_m    = ", a_m  );
    display("deviatoric cyclic hardening coef.     :: a_c    = ", a_c  );
    display("vol. coef. of plastic compressibility :: beta   = ", beta );
    display("friction angle at perfect plasticity (in degrees) :: phi_pp = ", phi_pp);
  }
}
*/


/*!
 * We request Mfront to calculate the SymmetricTangentOperator
 * which is nothing but the stiffness matrix
 */
//@ProvidesSymmetricTangentOperator;


/*!
 * In this block the law is integrated
 */
@Integrator{

  //static_cast<void>(smt); // remove compiler warning

  bool is_converge = true;                // Wrong Wrong correct MAB

  tfel::math::vector<double> mfront_parameters = {
    K_i    , G_i    , ne     , phi_pp , psi    ,
    beta   , p_c0   , a_m    , b      , a_c    ,
    alfa   , r_ela  , r_hys  , r_mob  , c_m    ,
    d      , c_c    , dltela , xkimin , m      ,
    facinc , iecoul , incmax , Kaux   , Gaux } ;

  behaviour_psd::HujeuxLaw psdSoilLaw;
  psdSoilLaw.init(mfront_parameters);

  if(!InitStressH)
  {

   // --------------------------------------------------------------
   // This will be done via PSD file in future //
   //---------------------------------------------------------------

   if( (!sig[0] || !sig[1] || !sig[2] || !sig[3] || !sig[4] || !sig[5]) )
   {

     print("  Stress initialization detected -----  ");

     for(int i = 0; i < 3; i++)
       sig[i] = p_c0;

     for(int i = 3; i < 6; i++)
       sig[i] = 0.;

   }

   display("  First iteration detected initState -----  ", InitStressH);
   psdSoilLaw.initState(hujxIsv,sig);
   InitStressH = true;

  }

  psdSoilLaw.ComputeStress( hujxIsv, sig /*, eto*/, epsP, deto, is_converge );

  //const stress lambda = computeLambda(E,nu);
  //const stress mu     = computeMu(,nu);
  //sig = 10*trace(eto+deto)*StrainStensor::Id()+2*20*(eto+deto);
  //if(computeTangentOperator_){
  //  Dt = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
  //}
}
