//=======================================================================================
//@DSL DefaultDSL;
//@DSL Implicit;
@DSL DefaultGenericBehaviour;
@Behaviour Hujeux;
@Date 10-05-2022;
@Description{

 Hujeux behaviour model is a cyclic constitutive law for non-linear soil behaviour.
 the model comprises a nonlinear elasticity controlled by  the  Young  modulus that
 depends on the confining pressure.

 Reference:
 J. C. Hujeux, A constitutive law for the cyclic loading of the soils.
 Parasismique genius Presses ENPC, Davidovici V. & al., pages 287-302, 1985

 D. Aubry , J.C. Hujeux, F. Lassoudiere & Y. Meimon, A doubles memory
 multiple model with mechanisms for cyclic soil behaviors,
 Int. Symp. Num. Models in Geomechanics, Zurich, vol. 1, pp 3-13, (1982).

}
//=======================================================================================


@ModellingHypotheses{PlaneStrain, Axisymmetrical, Tridimensional};

//! Strain tensor $\epsilon$
@Gradient StrainStensor eto;
eto.setGlossaryName("Strain");

//! Stress tensor $\sigma$
@Flux StressStensor sig;
sig.setGlossaryName("Stress");

//! this is a boolean parameter which controls the verbosity.
//! Intended to use for debugging.
@Parameter psdVerbosity = 0;
psdVerbosity.setEntryName("psdVerbosity");

//! $K_i$ is the initial bulk (isotropic) modulus
@Parameter K_i = 628.e6;
K_i.setEntryName("K_i");

//! $G_i$ is the initial shear modulus
@Parameter G_i = 290.e6;
G_i.setEntryName("G_i");

//! $ne\in[0,1]$ is the exponent for non-linear elasticity
//! $ne = 0$ corresponds to linear elasticity
@Parameter ne = 0.5;
ne.setEntryName("ne");

//! Friction angle at perfect plasticity (in degrees)
@Parameter phi_pp = -33;
phi_pp.setEntryName("phi_pp");

//! Characteristic State Line or dilatancy angle $\psi$ (in degrees)
//! in $p$ (effective mean stress) and $q$ (effective stress deviator) plane
//! $\psi = phi_pp for granular materials
@Parameter psi = -33;
psi.setEntryName("psi");

//! Volumetric plastic compressibility coefficient ($\beta > 0$)
@Parameter beta = 33;
beta.setEntryName("beta");

//! Initial Critical Pressure (or pre-consolidation stress in Pascal) $p_{c0} < 0$
@Parameter p_c0 = -50.e3;
p_c0.setEntryName("p_c0");

//!  Monotonous deviatoric hardening coefficient ($a_{m}\in]0,1]$)
@Parameter a_m = 0.0025;
a_m.setEntryName("a_m");

//! Cyclic deviatoric hardening coefficient ($a_{c}\in]0,1]$)
@Parameter a_c =  0.00001;
a_c.setEntryName("a_c");

//! $b\in[0,1]$ Yield surface shape coefficient
//! $b=0$ i.e Mohr-Coulomb and $b=1$ modified Cam-Clay
@Parameter b =  0.20 ;
b.setEntryName("b");

//! Domain Limit parameters (mobilization degrees called rays in Hujeux law):
//! Elastic Domain Limit for deviatoric hardening ($r_{ela}\in ]0,1[$)
@Parameter r_ela = 0.03;
r_ela.setEntryName("r_ela");

//! Hysteretic Domain Limit for deviatoric hardening ($r_{hys}\in ]0,1] and r_{hys} > r_{ela}$)
@Parameter r_hys =  0.04;
r_hys.setEntryName("r_hys");

//! Mobilized Domain Limit (full plasticity) for deviatoric hardening ($r_{mob}\in ]0,1] and r_{mob} >= r_{hys}$)
@Parameter r_mob =  0.80;
r_mob.setEntryName("r_mob");

//! Elastic Domain Limit for volumetric hardening ($dltela\in ]0,1[$)
@Parameter dltela =  0.02;
dltela.setEntryName("dltela");

//! Monotonous volumetric hardening coefficient ($c_{m}\in ]0,1]$)
@Parameter c_m = 0.004;
c_m.setEntryName("c_m");

//! Cyclic volumetric hardening coefficient ($c_{c}\in ]0,1]$)
@Parameter c_c = 0.002;
c_c.setEntryName("c_c");

//! Distance in e (void ratio)-lnp (effective mean stress) plane between Isotropic Consolidation and Critical State Lines
@Parameter d =  2.0;
d.setEntryName("d");

//! $alfa\in[0,1]$ Magnitude of the volumetric plastic strain rate function
//! $alfa=0$ i-e no volumetric plastic strains develop
@Parameter alfa = 1.0;
alfa.setEntryName("alfa");

//! $m\in[0,1]$ Exponent of the isotropic plastic strain rate function
@Parameter m = 1.0;
m.setEntryName("m");

//! Coefficient used in the isotropic hardening law
//! $xkimin\in[0,1]$ and usual value is 0
@Parameter xkimin = 0;
xkimin.setEntryName("xkimin");

//! Reduction coefficient applied on strain increments during law integration (at element group level)
@Parameter facinc = 0.2;
facinc.setEntryName("facinc");

//! Indicator for Hujeux yield criterion and plastic potential assumptions (at element group level)
//! Usual values for $iecoul = +-1 or +-3
//! Sign of $iecoul modifies the yield criterion:
//! $iecoul < 0$ i.e 3D effective mean stress considered
//! $iecoul > 0$ i.e 2D effective mean stress in the active deviatoric plane considered
@Parameter iecoul = 1;
iecoul.setEntryName("iecoul");

//! Number max of iterations for explicit integration of the law (at element group level)
@Parameter incmax = 50;
incmax.setEntryName("incmax");

//! $Kaux$ is the auxiliary bulk (isotropic) modulus for tangent operator
@Parameter Kaux = 628.e8;
Kaux.setEntryName("Kaux");

//! $Gaux$ is the auxiliary shear modulus for tangent operator
@Parameter Gaux = 290.e8;
Gaux.setEntryName("Gaux");

//! Reference Pressure to compute the adimensional coefficient for the nonlinear elasticity:
//! $K = K_i*(p/pref)^ne$ and $G = G_i*(p/pref)^ne$ where p is the current effective mean stress
@Parameter pref = -1.e6;
pref.setEntryName("pref");

/*!
Indicator for auxiliary tangent operator type
 *   0 = elastic (symmetric) => default
 *   1 = plastic (unsymmetric)
*/

@Private{

  void convert_stensor_to_mfront(StrainStensor& STensor){
    for(int i=0; i<6; i++)
      STensor[i] = STensor[i]*tfel::math::Cste<real>::isqrt2;
  }

  void print(std::string pp) const{
      std::cout << pp << std::endl;
  }

  void display(std::string pp, unsigned int aa) const{
      std::cout << pp <<  aa << std::endl;
  }

  void display(std::string pp, int aa) const{
      std::cout << pp <<  aa << std::endl;
  }

  void display(std::string pp, double aa) const{
      std::cout <<  std::setprecision(16)  << pp <<  aa << std::endl;
  }

  void display(std::string pp, long double aa) const{
      std::cout <<  std::setprecision(32) << pp <<  aa << std::endl;
  }

}

@Includes{
#include "stdafx.h"
#include "utils.h"
#include "hujeux.h"
}
@Sources {
#include "utils.cpp"
#include "hujeux.cpp"
}

//! A vector to 24 parameters for hujeux
@StateVariable real hujxIsv[24];
hujxIsv.setEntryName("hujeuxInternalStateVariables");

//! previous step stress  ---- I DOUBT it is a InternalStateVariables =>ef: it is not (computed each time)
//@StateVariable Stensor dSig;

//! plastic strain  ---- I DOUBT it is a InternalStateVariables =>ef: yes, we need to keep track of it along simulation
@StateVariable Stensor epsP;

//! variable to control initilization ----- FIND ANOTHER WAY TO DO THIs
@StateVariable real InitStressH;

/*
//-------------------------------
// USED IN @DSL DefaultDSL; mode
//-------------------------------
@InitLocalVariables {
  if(!sig[0])
  {
    print("Entering InitLocalVariables for stress initilization ");

    for(int i = 0; i < 3; i++)
      sig[i] = p_c0;

    for(int i = 3; i < 6; i++)
      sig[i] = 0.;
  }

  if(psdVerbosity)
  {
    display("initial compressibility modulus       :: K_0    = ", K_0  );
    display("initial shear modulus                 :: G_0    = ", G_0  );
    display("nonlinear elastic characteristic      :: ne     = ", ne   );
    display("dilatancy angle  (in radians)         :: psi    = ", psi  );
    display("coef. of plastic compressibility      :: beta   = ", beta );
    display("initial critical pressure             :: p_c0   = ", p_c0 );
    display("volumetric monotonous hardening coef. :: a_m    = ", a_m  );
    display("deviatoric cyclic hardening coef.     :: a_c    = ", a_c  );
    display("vol. coef. of plastic compressibility :: beta   = ", beta );
    display("friction angle at perfect plasticity (in degrees) :: phi_pp = ", phi_pp);
  }
}
*/


/*!
 * We request Mfront to calculate the SymmetricTangentOperator
 * which is nothing but the stiffness matrix
 */
//@ProvidesSymmetricTangentOperator;


/*!
 * In this block the law is integrated
 */
@Integrator{

  //static_cast<void>(smt); // remove compiler warning

  bool is_converge = true;                // Wrong Wrong correct MAB

  tfel::math::vector<double> mfront_parameters = {
    K_i    , G_i    , ne     , phi_pp , psi    ,
    beta   , p_c0   , a_m    , b      , a_c    ,
    alfa   , r_ela  , r_hys  , r_mob  , c_m    ,
    d      , c_c    , dltela , xkimin , m      ,
    facinc , iecoul , incmax , Kaux   , Gaux } ;

  behaviour_psd::HujeuxLaw psdSoilLaw;
  psdSoilLaw.init(mfront_parameters);

// Stress (strain) tensor expected for Hujeux: xx yy zz xy yz xz
// MFront Stress (strain) tensor: xx yy zz xy xz yz
   Stensor sighuj = sig;
   Stensor detohuj = deto;
   Stensor epsPhuj = epsP;
   sighuj[4] = sig[5];
   sighuj[5] = sig[4];
   detohuj[4] = deto[5];
   detohuj[5] = deto[4];
   epsPhuj[4] = epsP[5];
   epsPhuj[5] = epsP[4];

  if(!InitStressH)
  {

   // --------------------------------------------------------------
   // This will be done via PSD file in future //
   //---------------------------------------------------------------

//   if( (!sig[0] || !sig[1] || !sig[2] || !sig[3] || !sig[4] || !sig[5]) ) =>ef: test is wrong
   if( (!sighuj[0] && !sighuj[1] && !sighuj[2]) )
   {

     print("  Stress initialization detected -----  ");

     // ef: this initialization is working only for material point testing
     // (not for true FEM simulations)
     for(int i = 0; i < 3; i++)
       sighuj[i] = p_c0;

     for(int i = 3; i < 6; i++)
       sighuj[i] = 0.;

   }

   display("  First iteration detected initState -----  ", InitStressH);

//   psdSoilLaw.initState(hujxIsv,sig);
   psdSoilLaw.initState(hujxIsv,sighuj);
   InitStressH = true;

  }


//  psdSoilLaw.ComputeStress( hujxIsv, sig /*, eto*/, epsP, deto, is_converge );
  psdSoilLaw.ComputeStress( hujxIsv, sighuj, epsPhuj, detohuj, is_converge );

   // Back to MFront ordering
   sig = sighuj;
   deto = detohuj;
   epsP = epsPhuj;

   sig[4] = sighuj[5];
   sig[5] = sighuj[4];
   deto[4] = detohuj[5];
   deto[5] = detohuj[4];
   epsP[4] = epsPhuj[5];
   epsP[5] = epsPhuj[4];
}
