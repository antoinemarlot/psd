//
@DSL DefaultDSL;
@Behaviour HujeuxECP1985;
@Author Evelyne Foerster;
@Date ;
@Description{
 "Original ECP Hujeux model for nonlinear soil behaviour:" 
 "1 volumetric (consolidation) & 3 kinematic plane strain hardening bounding surfaces"
 "Unique formulation for monotonic and cyclic loadings"
}


/// CHECK THIS  ////
//@Parameter iecoul = 1; // Plastic yielding formulation
@Parameter facinc = 0.2; // Factor reduction on law integration increments
@Parameter pref = -1.e6; // Factor reduction on law integration increments

/*!
 * indaux Indicator for auxiliary tangent operator type
 *   0 = elastic (symmetric) => default
 *   1 = plastic (unsymmetric)
*/

// MaterialProperty tab of 24 constant real scalars (user data) to be read on the fly:
// 0-Ei  1-Nu  2-ne  3-phi(°)  4-psi(°)  5-beta  6-pci  7-b
// 8-amon 9-acyc 10-cmon  11-ccyc  12-d 13-alfa
// 14-rayela 15-rayhys 16-raymbl 17-dltela
// 18-xkimin   19-m   20-facinc   21-iecoul  22-incmax
// 23-Eaux 24-indaux

//! Material properties
@MaterialProperty real matProp[25];
matProp.setEntryName("HujeuxMaterialProperties");

//! State (internal) variables stored as a tab of 25 real scalars
@StateVariable real histTab[24];
histTab.setEntryName("HujeuxInternalVariables");

//! Status for active yield surfaces
@LocalVariable bool bplast[4];

//! Stress at the beginning of the time step
@LocalVariable StressStensor sig0;

@Includes{
#include "HujeuxECP1985-core-implement.hxx"
#include "nlsoil_utils.hxx"
}
@Sources {
#include "HujeuxECP1985-core-implement.cxx"
#include "mat_tools.cc"
}

@InitLocalVariables {
  sig0 = sig;
  for (auto &b: bplast) {
      b = false;
  }
}

/*!
 * We request Mfront to calculate the SymmetricTangentOperator
 * which is nothing but the stiffness matrix
 */
@ProvidesSymmetricTangentOperator;

/*!
 * In this block the law is integrated
 *   1. compute the Lame parameters lambda, mu
 *   2. compute the stress state
 *   2. compute the stiffness matrix
 */
@Integrator{
  static_cast<void>(smt); // remove compiler warning
//  sig = lambda*trace(eto+deto)*StrainStensor::Id()+2*mu*(eto+deto);



  if(computeTangentOperator_){
//    Dt = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
  }
}
