//-------------------------------------------------------------//
// Iwan : a non-linear soil law implementation for PSD //
//-------------------------------------------------------------//
@DSL Implicit;
@Behaviour Iwan;
@Author Vinicius Alves Thomas Helfer Reine Fares;
@Description {
  Iwan model for cyclic behaviour of soils.
  Here we implement the first algorithm
  proposed by Simo and Hughes
  
  Simo , Juan C and Hughes , Thomas J. R
  Computational inelasticity
  1998 , Springer
  isbn: 0-387-97520-9 978-0-387-97520-7
}



@Epsilon 1.e-16;                 // tolerance of local stress integration algorithm
@Theta 1.;                       // time integration scheme
@IterMax 200;                    // for local local stress integration algorithm
//@Algorithm NewtonRaphson;        //_NumericalJacobian;_LevenbergMarquardt


@Brick StandardElasticity;


@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");


@MaterialProperty real   nu;
nu.setGlossaryName("PoissonRatio");


@MaterialProperty real Ns ;
Ns.setEntryName("NumberofSpring") ;



@MaterialProperty stress C[34];
C.setEntryName("BackSCoeff_Ci") ;


@MaterialProperty stress Y[34];
Y.setEntryName("VMS_Yi") ;

// Exemple
// ----------------------- START---------------------------------------------------------------------------
// @ElasticMaterialProperties{614930000.0, 3.71000000E-01};
// @IntegerConstant Ns = 16;
// @Parameter stress C[Ns] = {422442500.2 , 29108930828.0 , 22717782323.0 , 18545244902.0 , 6196408158.0 , 
// 3943563406.0 , 2137231653.0 , 2142487666.0 , 909817671.5 , 432948424.3 , 256315552.3 , 67747318.24 , 
// 51552950.89 , 20695768.73 , 4435263.381 , 12587863.55, 0., 0., 0.,0. };
// @AuxiliaryStateVariable stress Y[100] ;
// Y.setGlossaryName("Stessname2") ;
//constant, obtained from laboratory tests, that characterizes the nth Yield surface
// @Parameter stress Y[Ns] = {340005.5091, 420308.5133, 524405.5834, 653604.7237, 1647053.671, 2520327.797, 
// 4384366.063, 5203073.539, 8131982.302, 11264333.18, 13251691.55, 16720370.49, 
// 19253276.75, 20620902.16, 22768742.08, 21428992.9, 0., 0., 0.,0. };
// ----------------------- END ---------------------------------------------------------------------------

// An auxiliary state variable is a persistent variable but not an integration variable.
@AuxiliaryStateVariable strain p[34];
p.setGlossaryName("EquivalentPlasticStrain");


// state variable besides eel (that is added because we used @Brick StandardElasticity;):
// A "standard" state variable is a persistent state variable and an integration variable
@StateVariable Stensor X[34];
X.setEntryName("BackStress");


@LocalVariable strain dp[34];

// Plastic flow tensor
@LocalVariable Stensor n[34];


// status of each plastic system
@LocalVariable bool status[34];


@LocalVariable stress lambda;
@LocalVariable stress mu;


@InitLocalVariables{
  lambda = computeLambda(young,nu);
  mu     = computeMu(young,nu);
}

@Predictor {
  const auto sigel = computeElasticPrediction();
  for (unsigned short i = 0; i != Ns; ++i) {
    status[i] = sigmaeq(sigel - X[i]) > Y[i];
  }
  deel = (trace(deto) / 3) * StrainStensor::Id();
}

@Integrator {
  const real eps = 1e-12;
  for (unsigned short i = 0; i != Ns; ++i) {
    if (!status[i]) {
      continue;
    };
    const auto seq = sigmaeq(sig - X[i]);
    const auto iseq = 1 / max(seq , eps * young);
    dp[i] = 2 * (seq - Y[i]) / (3 * theta * C[i]);
    n[i] = 3 * deviator(sig - X[i]) * (iseq / 2);
    feel += dp[i] * n[i];
    dfeel_ddeel += 2 * mu * theta *
                   (theta * dp[i] * iseq * (Stensor4::M() - (n[i] ^ n[i])) +
                    2 / (3 * theta * C[i]) * (n[i] ^ n[i]));
  }

}

@AdditionalConvergenceChecks {
  if (converged) {
    // checking status consistency
    for (unsigned short i = 0; i != Ns; ++i) {
      if (status[i]) {
        if (dp[i] < epsilon) {
          // desactivating this system
          converged = status[i] = false;
        }
      } else {
        if (sigmaeq(sig - X[i]) > Y[i] + young * epsilon) {
          converged = false;
          status[i] = true;
        }
      }
    }
  }
}
 
@UpdateAuxiliaryStateVariables {
  for (unsigned short i = 0; i != Ns; ++i) {
    if (status[i]) {
      p[i] += dp[i];
      X[i] += C[i] * dp[i] * n[i];
    }
  }
}
