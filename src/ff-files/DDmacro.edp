//-----------------------------User-defined DD macros--------------------------//

//==============================================================================
// -------Loading global ff-fuctions------- 
//==============================================================================
load "thresholdings"		// ff++ function to remove nonzeros
searchMethod = 1;		// Interpolation search method upgrade

//==============================================================================
// -------Diffrent partitioner macros------- 
//==============================================================================

IFMACRO(!partitioner)
cout << "\n!---ERROR---!!!---ERROR---!!!---ERROR---!!!---ERROR---!!!---ERROR---!\n";
cout << "***********************************************************************\n";
cout << "* macro 'partitioner' must be set to 'metis', 'scotch', or 'parmetis' *\n";
cout << "* See the scriptGenerator.edp file for  explanation on  -partitioner' *\n";
cout << "***********************************************************************\n";
exit(1);
ENDIFMACRO
IFMACRO(partitioner,parmetis)
load "parmetis"
macro partitionerSeq(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)parmetis(part, Th, size, 
      communicator = comm, worker = getARGV("-parmetis_worker", 1))// EOM
ENDIFMACRO
IFMACRO(partitioner,metis)
load "metis"
macro partitionerSeq(part, Th, size)metisdual(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
IFMACRO(partitioner,scotch)
load "scotch"
macro partitionerSeq(part, Th, size)scotch(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO


//==============================================================================
// -------Problem dimension  related macros------- 
//==============================================================================

IFMACRO(!dimension)
cout << "\n!---ERROR---!!!---ERROR---!!!---ERROR---!!!---ERROR---!!!---ERROR---!\n";
cout << "***********************************************************************\n";
cout << "* macro dimension' must be set to [int] 2 or 3 for 2D  or 3D problems *\n";
cout << "* See the scriptGenerator.edp  file  for  explanation on  -dimension' *\n";
cout << "***********************************************************************\n";
exit(1);
ENDIFMACRO
IFMACRO(dimension,2)
macro meshN()mesh			// two-dimensional problem
macro bbN()bb2				// two-dimensional bounding box
macro intN()int2d			// two-dimensional integral
macro intN1()int1d			// one-dimensional integral
macro readmeshN()readmesh		// two-dimensional 'mesh' reader
macro gmshloadN()gmshload		// two-dimensional 'msh' reader
macro DummyMesh()square(1,1)		// two-dimensional dummymesh
macro grad(i) [dx(i),dy(i)]		// two-dimensional gradient
ENDIFMACRO
IFMACRO(dimension,3)
load "msh3"
macro meshN()mesh3			// three-dimensional problem
macro bbN()bb3				// three-dimensional bounding box
macro intN()int3d			// three-dimensional integral
macro intN1()int2d			// two-dimensional   integral
macro readmeshN()readmesh3		// three-dimensional problem
macro gmshloadN()gmshload3		// three-dimensional 'msh' reader
macro DummyMesh()cube(1,1,1)		// three-dimensional dummymesh
macro grad(i)[dx(i),dy(i),dz(i)]	// three-dimensional gradient
ENDIFMACRO


//==============================================================================
// -------Bounding box macros------- 
//==============================================================================

macro bb2(boundingMesh, overshoot, ThGlobal)
            real[int] bb(4);
            boundingbox(bb, boundingMesh);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3)));// EOM

macro bb3(boundingMesh, overshoot, ThGlobal)
            real[int] bb(6);
            boundingbox(bb, boundingMesh);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;
            bb(4) -= overshoot;
            bb(5) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3) && z >= bb(4) && z <= bb(5)));// EOM

//==============================================================================
// -------Partition macro------- 
//==============================================================================

macro partition(meshName, borderName, globalName, PhGlobal, VhGlobal, part, rank, size, s, overlap, D, Wh, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs)
        meshName = trunc(globalName, abs(part - rank) < 0.1, label = fakeInterface);
        mpiBarrier(comm);
        real timerPartition = mpiWtime();
        intersection.resize(1);
        intersection[0].resize(0);
        {
            fespace PhLocal(meshName, P0);
            PhLocal overshoot = hTriangle;
            real max = 4.0 * overlap * overshoot[].max;
            bbN(meshName, max, globalName)
        }
        PhGlobal supp = abs(part - rank) < 0.1;
        VhGlobal suppSmooth;
        AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
        {
            meshN neighbors = trunc(globalName, suppSmooth > 0.001);
            fespace Oh(neighbors, P0);
            Oh partOverlap = part;
            Unique(partOverlap[], intersection[0], remove = rank);
        }
        fespace VhLocal(meshName, P1);
        VhLocal[int] partitionIntersection(intersection[0].n);
        if(s > 1) {
            globalName = trunc(globalName, suppSmooth > 0.001, split = s);
            supp = abs(part - rank) < 0.1;
            suppSmooth = 0;
            AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
        }
        globalName = trunc(globalName, suppSmooth > 0.001, label = 9999);
        real eps = intN(globalName)(1.0);
        real[int] epsTab(intersection[0].n);
        mpiRequest[int] rq(2 * intersection[0].n);
        if(mpiSize(comm) == size) {
            for(int j = 0; j < intersection[0].n; ++j)
                Irecv(processor(intersection[0][j], comm, rq[j]), epsTab[j]);
            for(int j = 0; j < intersection[0].n; ++j)
                Isend(processor(intersection[0][j], comm, rq[intersection[0].n + j]), eps);
        }
        else
            epsTab = 1.0e+30;
        supp = supp;
        suppSmooth = suppSmooth;
        meshName = trunc(globalName, suppSmooth > 0.501, label = fakeInterface);
        if(!removeZeros && (fakeInterface != -111111 || overlap != 1)) {
            if(suppSmooth[].min < 0.501)
                borderName = trunc(globalName, (suppSmooth > (overlap - 0.999) / (2 * overlap)) && (suppSmooth < 0.501), label = (abs(fakeInterface) + 1) * 100);
        }
        VhLocal khi = max(2 * suppSmooth - 1.0, 0.0);
        VhLocal sum = khi;
        VhGlobal phi = 0;
        part = part;
        int numberIntersection = 0;
        for(int k = 0; k < 2 * intersection[0].n; ++k)
            mpiWaitAny(rq);
        for(int i = 0; i < intersection[0].n; ++i) {
            PhGlobal suppPartition = abs(intersection[0][i] - part) < 0.1;
            AddLayers(globalName, suppPartition[], overlap, phi[]);
            if(min(eps, epsTab[i]) > 0.0) {
                if(intN(globalName)(phi) / min(eps, epsTab[i]) > 1.0e-6) {
                    partitionIntersection[numberIntersection] = phi;
                    if(!trueRestrict)
                        sum[] += partitionIntersection[numberIntersection][];
                    intersection[0][numberIntersection++] = intersection[0][i];
                }
            }
        }
        if(numberIntersection != intersection[0].n)
            intersection[0].resize(numberIntersection);
        intersection.resize(1 + numberIntersection);
        meshN[int] meshIntersection(numberIntersection);
        for(int i = 0; i < numberIntersection; ++i) {
            meshIntersection[i] = trunc(meshName, partitionIntersection[i] > 1.0e-6, label = 9999);
            if(!removeZeros) {
                fespace WhIntersection(meshIntersection[i], P);
                matrix R = interpolate(WhIntersection, Wh);
                R.thresholding(1.0e-10);
                real[int] C;
                int[int] I;
                [I, intersection[1 + i], C] = R;
                intersection[1 + i].resize(R.nbcoef);
            }
        }
        partitionIntersection.resize(0);
        fespace WhPart(meshName, PkPart);
        WhPart defPart(func2vec);
        if(trueRestrict) {
            khi = abs(part - rank) < 0.1;
            VhLocal sigma = part;
            for(int i = 0; i < numberIntersection; ++i) {
                if(rank < intersection[0][i]) {
                    for(int j = 0; j < VhLocal.ndof; ++j) {
                        if(khi[][j] > 0.9 && abs(sigma[][j] - intersection[0][i]) < 0.1)
                            khi[][j] = 0.0;
                    }
                }
            }
            if(mpiSize(comm) == size && removeZeros) {
                meshN ThIntersection;
                fespace PhIntersection(ThIntersection, P0);
                PhIntersection[int] recv(numberIntersection);
                PhIntersection[int] send(numberIntersection);
                mpiRequest[int] rq(2 * numberIntersection);
                for(int i = 0; i < numberIntersection; ++i) {
                    ThIntersection = meshIntersection[i];
                    Irecv(processor(intersection[0][i], comm, rq[i]), recv[i][]);
                    send[i] = khi;
                    Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i][]);
                }
                meshName = trunc(meshName, khi > 1.0e-6, label = 9999);
                khi = khi;
                int[int] skip(0);
                for(int k = 0; k < 2 * numberIntersection; ++k) {
                    int i = mpiWaitAny(rq);
                    if(i < numberIntersection) {
                        ThIntersection = meshIntersection[i];
                        PhIntersection intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
                        if(intersection[].l2 > 1.0e-6)
                            meshIntersection[i] = trunc(meshIntersection[i], intersection  > 1.0e-6, label = 9999);
                        else {
                            skip.resize(skip.n + 1);
                            skip[skip.n - 1] = i;
                        }
                    }
                }
                skip.sort;
                intersection.resize(1 + numberIntersection - skip.n);
                int j = 0;
                for(int i = 0; i < numberIntersection; ++i) {
                    bool skipped = false;
                    if(j < skip.n) {
                        if(skip[j] == i) {
                            ++j;
                            skipped = true;
                        }
                    }
                    if(!skipped) {
                        fespace WhIntersection(meshIntersection[i], P);
                        matrix R = interpolate(WhIntersection, Wh);
                        R.thresholding(1.0e-10);
                        real[int] C;
                        int[int] I;
                        [I, intersection[1 + i - j], C] = R;
                        intersection[1 + i - j].resize(R.nbcoef);
                        intersection[0][i - j] = intersection[0][i];
                    }
                }
                numberIntersection -= skip.n;
                intersection[0].resize(numberIntersection);
                if(fakeInterface != -111111 || overlap != 1) {
                    PhGlobal suppPartition = khi > 0.1;
                    AddLayers(globalName, suppPartition[], 1, phi[]);
                    borderName = trunc(globalName, phi > 0.001 && phi < 0.501, label = (abs(fakeInterface) + 1) * 100);
                }
            }
        }
        else
            khi[] = khi[] ./= sum[];
        defPart(func2vec) = initPart(khi);
        D.resize(Wh.ndof);
        D = func2vec[];
        if(trueRestrict && ((WhPart.ndof % meshName.nt) == 0)) {
            defPart(func2vec) = initPart(abs(part - rank) < 0.1);
            D = func2vec[];
        }// EOM



//==============================================================================
// -------Building the resctriction and communication MPI patterns------- 
//==============================================================================

macro buildEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs)
{
    real timing = mpiWtime();
    fespace WhLocal(Th, P);
    if(mpiSize(comm) > 1 && !excluded) {
        meshN ThGlobal = Th;
        fespace PhGlobal(ThGlobal, P0);
        fespace VhGlobal(ThGlobal, P1);
        PhGlobal partGlobal;
        if(userPartitioning.n != PhGlobal.ndof || labPeriodic.n > 0) {
            timing = mpiWtime();
            if(mpiRank(comm) == 0) {
                if(verbosity > 0)
                    cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);

                    partitionerSeq(partGlobal[], ThGlobal, mpiSize(comm));
                    
            }
                partitionerPar(partGlobal[], ThGlobal, comm, mpiSize(comm));
            if(mpiRank(comm) == 0 && verbosity > 0)
                cout.scientific << " (in " << mpiWtime() - timing << ")" << endl;
            timing = mpiWtime();
        }
        else {
            partGlobal[] = userPartitioning;
            broadcast(processor(0, comm), partGlobal[]);
        }
IFMACRO(!trueRestrict)
        bool trueRestrict = usedARGV("-true_restrict") != -1;
ENDIFMACRO
IFMACRO(!removeZeros)
        bool removeZeros = trueRestrict && overlap == 1 && usedARGV("-remove_zeros") != -1;
ENDIFMACRO
        partition(Th, ThBorder, ThGlobal, PhGlobal, VhGlobal, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, D, WhLocal, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs)
    }
    else if(mpiSize(comm) == 1) {
        if(s > 1)
            Th = trunc(Th, 1, split = s);
        D.resize(WhLocal.ndof);
        D = 1.0;
    }
    mpiBarrier(mpiCommWorld);
    if(verbosity > 0 && mpirank == 0) cout.scientific << " --- partition of unity built (in " << mpiWtime() - timing << ")" << endl;
}// EOM

//==============================================================================
// ------- Build macro ------- 
//==============================================================================

macro PETScMPIBuild(Th, s, intersection, D, P, comm) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
}// EOM

macro PETScMPIBuildWithPartitioning(Th, part, s, intersection, D, P, comm) {
    meshN ThBorder;
    int[int] emptyArray(0);
    int fakeInterface = -111111;   
    int overlap = 1;
    bool excluded = false;        
    buildEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
}// EOM


macro PETScMPIBuildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart) {
    meshN ThBorder;
    int fakeInterface = -111111; 
    int overlap = 1;          
    int[int] emptyArray(0);
    bool excluded = false;            
    buildEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
}// EOM

