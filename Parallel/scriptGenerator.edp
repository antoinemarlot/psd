/*******************************************************************************
*									       *
* Date:	   04/03/2019							       *
* Type:    Execution file						       *
* Comment: This main file generates three files: macro.edp, varfmatsolve.edp,  *
*          and   meshPartitioning.edp.  Commandline  arguments  controls  the  *
*          generated file nature.	 		       		       *
* To run : ff-mpirun -np 1 main.edp -v 0 -ns -nw			       *
*									       *
*******************************************************************************/

//==============================================================================
// All command line argument descriptions
//==============================================================================
/*
  -dimension   [int]	  Accepts values 2 or 3. Default 2. 2 for 2D 3 for 3D.
  
  -partitioner [sting]    Mesh partitioner to be used. Options are "metis"
  			  "parmetis" "scotch" or "ptstoch".
  			
  -partitioner parmetis   Mesh partitioner is parmetis. Additional option is 
  			  active '-parmetis_worker [int]'.			
  			
  -lagrange    [int]      Lagrange order used for building FE space. Options are 
  			  1 for P1 or 2 for P2. Defaut is P1.
  			  
  -plot        [bool]     To activate plotting routine.


*/

//==============================================================================
// All files to be included
//==============================================================================

  include "getARGV.idp"    	// Enables importing commandline arguments
  include "parameters.edp"  	//Control parameters, propeties, etc..

//==============================================================================
// All variables
//==============================================================================
  int spc = getARGV("-dimension", 2);			//2=2D or 3=3D
  int lag = getARGV("-lagrange" , 1);			//1=P1 or 2=P2  
  
  string whichPartitioner=getARGV("-partitioner", "parmetis");

  bool plotAll=  usedARGV("-plot") != -1;

//==============================================================================
// Building the macro.edp file
//==============================================================================
   
{ofstream  w("macro.edp");

w <<"/******************************Userdefined macros*******************************\n";
w <<"*                                                                              *\n";
w <<"* Note!!! This file is  generated  by running scriptGenerator.edp. Do not edit *\n";
w <<"*         in order to  control this  file please change flag arguments of  the *\n";
w <<"*         scriptGenerator, details of which are present in scriptGenerator.edp *\n";
w <<"*                                                                              *\n";
w <<"*******************************************************************************/\n\n";

if(spc==2){
 w << "  func Pk = [P"+lag+",P"+lag+"];              // Finite element space\n";
 w << "  macro dimension()2// EOM                    // Two-dimensional problem\n";
 w << "  macro def(i)[i, i#1]// EOM                  // Vector field definition\n";
 w << "  macro init(i)[i, i]// EOM                   // Vector field initialization\n";
}
if(spc==3){
 w << "  func Pk = [P"+lag+",P"+lag+",P"+lag+"];     // Finite element space\n";
 w << "  macro dimension()3// EOM                    // Three-dimensional problem\n";
 w << "  macro def(i)[i, i#1, i#2]// EOM             // Vector field definition\n";
 w << "  macro init(i)[i, i, i]// EOM                // Vector field initialization\n";
}

w << "  macro  partitioner()"+whichPartitioner+"// EOM             // Mesh partitioner\n";

}  


//==============================================================================
// Building the meshPartitioning.edp file
//==============================================================================
  
{ofstream  w("meshPartitioning.edp");

w <<"/*****************************Mesh And Partitioning*****************************\n";
w <<"*                                                                              *\n";
w <<"* Note!!! This file is  generated  by running scriptGenerator.edp. Do not edit *\n";
w <<"*         in order to  control this  file please change flag arguments of  the *\n";
w <<"*         scriptGenerator, details of which are present in scriptGenerator.edp *\n";
w <<"*                                                                              *\n";
w <<"*******************************************************************************/\n\n";

if(spc==2)
 w <<"meshN Th = square(1, 1);                  // This is a dummy mesh for now\n";
if(spc==3)
 w <<"meshN Th = cube(1, 1, 1);                 // This is a dummy mesh for now\n";

w <<"fespace Vh(Th, Pk);                        // Local mixed FE space\n";
w <<"int[int] arrayIntersection;                // Ranks of neighboring subdomains\n";
w <<"int[int][int] restrictionIntersection(0);  // Local-to-neighbors renumbering\n";
w <<"real[int] D;                               // Partition of unity\n\n";

w <<"//==============================================================================\n";
w <<"// -------Function building the restriction matrix and partion of unity-------//\n";
w <<"//==============================================================================\n\n";
w <<"func int PartThAndBuildCommunication(){\n";
w <<"  int s = getARGV(\"-split\", 1);              // refinement factor\n\n";
w <<"  load \"gmsh\"                                // Load meshes from gmsh\n";
w <<"  meshN ThBorder, ThGlobal;                  // Local dummy meshes\n";
w <<"  ThGlobal = gmshloadN(\"\"+ThName+\".msh\");    // Global mesh loaded\n\n";
w <<"  build(Th, ThBorder, ThGlobal, -111111, s, 1, D, arrayIntersection,\n"; 
w <<"      restrictionIntersection, Vh, Pk, mpiCommWorld, false)\n";
w <<"  return 0;\n";
w <<"}\n\n";
w <<"PartThAndBuildCommunication();\n\n";

if(plotAll){
w <<"//==============================================================================\n";
w <<"// -------Plotting using Medit-------//\n";
w <<"//==============================================================================\n\n";
w <<"load  \"medit\"                       // Loading the medit viz module\n";
w <<"medit(\"Th\"+mpirank+\"\",Th);          // Mesh visualization\n";
}

}
