/*******************************************************************************
*									       *
* Date:	   04/03/2019							       *
* Type:    Execution file						       *
* Comment: This main file generates three files: macro.edp, varfmatsolve.edp,  *
*          and   meshPartitioning.edp.  Commandline  arguments  controls  the  *
*          generated file nature.	 		       		       *
* To run : ff-mpirun -np 1 main.edp -v 0 -ns -nw			       *
*									       *
*******************************************************************************/

//==============================================================================
// All command line argument descriptions
//==============================================================================
/*
  -dimension   [int]	  Accepts values 2 or 3. Default 2. 2 for 2D 3 for 3D.
  
  -partitioner [sting]    Mesh partitioner to be used. Options are "metis"
  			  "parmetis" "scotch" or "ptstoch".
  			
  -partitioner parmetis   Mesh partitioner is parmetis. Additional option is 
  			  active '-parmetis_worker [int]'.			
  			
  -lagrange    [int]      Lagrange order used for building FE space. Options are 
  			  1 for P1 or 2 for P2. Defaut is P1.
  			  
  -plot        [bool]     To activate plotting routine.


*/

//==============================================================================
// All files to be included
//==============================================================================

  include "getARGV.idp"    	// Enables importing commandline arguments
  include "parameters.edp"  	//Control parameters, propeties, etc..

//==============================================================================
// All variables
//==============================================================================
  int spc = getARGV("-dimension", 2);			//2=2D or 3=3D
  int lag = getARGV("-lagrange" , 1);			//1=P1 or 2=P2  
  
  string whichPartitioner=getARGV("-partitioner", "parmetis");

  bool plotAll=  usedARGV("-plot") != -1;

//==============================================================================
// Building the macro.edp file
//==============================================================================
   
{ofstream  w("macro.edp");

w <<"/******************************Userdefined macros*******************************\n";
w <<"*                                                                              *\n";
w <<"* Note!!! This file is  generated  by running scriptGenerator.edp. Do not edit *\n";
w <<"*         in order to  control this  file please change flag arguments of  the *\n";
w <<"*         scriptGenerator, details of which are present in scriptGenerator.edp *\n";
w <<"*                                                                              *\n";
w <<"*******************************************************************************/\n\n";

if(spc==2){
 w << "  func Pk = [P"+lag+",P"+lag+"];                          // Finite element space\n";
 w << "  macro dimension()2// EOM                    // Two-dimensional problem\n";
 w << "  macro def(i)[i, i#1]// EOM                  // Vector field definition\n";
 w << "  macro init(i)[i, i]// EOM                   // Vector field initialization\n";
 w << "  macro divergence(i)(dx(i)+dy(i#1))// EOM    // Divergence function\n";
 w << "  macro epsilon(i) [dx(i), dy(i#1),\n"; 
 w << "                   (dy(i)+dx(i#1))/sqrt(2.0)]//EOM  // Strain definition\n";
  
}
if(spc==3){
 w << "  func Pk = [P"+lag+",P"+lag+",P"+lag+"];     // Finite element space\n";
 w << "  macro dimension()3// EOM                    // Three-dimensional problem\n";
 w << "  macro def(i)[i, i#1, i#2]// EOM             // Vector field definition\n";
 w << "  macro init(i)[i, i, i]// EOM                // Vector field initialization\n";
 w << "  macro divergence(i)(dx(i)+dy(i#1)+dz(i#2))// EOM // Divergence function\n";
}

w << "  macro  partitioner()"+whichPartitioner+"// EOM          // Mesh partitioner\n";

}  


//==============================================================================
// Building the meshPartitioning.edp file
//==============================================================================
  
{ofstream  w("meshPartitioning.edp");

w <<"/*****************************Mesh And Partitioning*****************************\n";
w <<"*                                                                              *\n";
w <<"* Note!!! This file is  generated  by running scriptGenerator.edp. Do not edit *\n";
w <<"*         in order to  control this  file please change flag arguments of  the *\n";
w <<"*         scriptGenerator, details of which are present in scriptGenerator.edp *\n";
w <<"*                                                                              *\n";
w <<"*******************************************************************************/\n\n";

if(spc==2)
 w <<"meshN Th = square(1, 1);                   // This is a dummy mesh for now\n";
if(spc==3)
 w <<"meshN Th = cube(1, 1, 1);                 // This is a dummy mesh for now\n";

w <<"fespace Vh(Th, Pk);                        // Local mixed FE space\n";
w <<"int[int] arrayIntersection;                // Ranks of neighboring subdomains\n";
w <<"int[int][int] restrictionIntersection(0);  // Local-to-neighbors renumbering\n";
w <<"real[int] D;                               // Partition of unity\n\n";

w <<"//==============================================================================\n";
w <<"// -------Function building the restriction matrix and partion of unity-------//\n";
w <<"//==============================================================================\n\n";
w <<"func int PartThAndBuildCommunication(){\n";
w <<"  int s = getARGV(\"-split\", 1);                    // refinement factor\n\n";

w <<"  load \"gmsh\"                                      // Load meshes from gmsh\n";
w <<"  meshN ThGlobal = gmshloadN(\"\"+ThName+\".msh\");    // Global mesh loaded\n\n";

w <<"  PETScMPIBuild(Th, ThGlobal, s, D, arrayIntersection,\n"; 
w <<"      restrictionIntersection, Vh, Pk, mpiCommWorld)\n\n";

w <<"  return 0;\n";
w <<"}\n\n";

w <<"mpiBarrier(mpiCommWorld);\n";
w <<"t0 = mpiWtime(); \nif(mpirank==0)cout << \"Mesh partitioning with \"<< Stringification(partitioner) <<\" began\\n\";\n\n";
      

w <<"    PartThAndBuildCommunication();\n\n";

w <<"mpiBarrier(mpiCommWorld);\n";
w <<"if(mpirank==0)cout << \"Mesh partitioning  ended in :----------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n";

}


//==============================================================================
// Building the varfmatsolve.edp file
//==============================================================================

{ofstream  w("varfmatsolve.edp");

w <<"/*****************************Mesh And Partitioning*****************************\n";
w <<"*                                                                              *\n";
w <<"* Note!!! This file is  generated  by running scriptGenerator.edp. Do not edit *\n";
w <<"*         in order to  control this  file please change flag arguments of  the *\n";
w <<"*         scriptGenerator, details of which are present in scriptGenerator.edp *\n";
w <<"*                                                                              *\n";
w <<"*******************************************************************************/\n\n";


w <<"//==============================================================================\n";
w <<"// -------Variation formulation-------//\n";
w <<"//==============================================================================\n\n";



w <<"varf elast(def(u),def(v))\n";
w <<"	= intN(Th)(\n";
w <<"			lambda*divergence(u)*divergence(v)\n";
w <<"			+2.*mu*( epsilon(u)'*epsilon(v) )\n";
w <<"		  )\n";
w <<"	+ intN(Th)(fy*v1)                     // Force component in y\n";
w <<"	+ on(Dlabel,u=0,u1=0);                // Dirichlet cond. on\n\n";

	  	     
		    
w <<"//==============================================================================\n";
w <<"//  -------Local Au=b assembly and solving-------//\n";
w <<"//==============================================================================\n\n";	
         
w <<"//------------Assembly for A------------------//\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" t0 = mpiWtime(); \n";
w <<" if(mpirank==0)cout << \"Matrix assembly began\\n\";\n";
w <<"      matrix<real> ALoc = elast(Vh,Vh);\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" if(mpirank==0)cout << \"Matrix assembly ended in :-------------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n\n\n";


w <<"//------------Assembly for b------------------//\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" t0 = mpiWtime(); \n";
w <<" if(mpirank==0)cout << \"RHS assembly began\\n\";\n";
w <<"      real[int]    b = elast(0,Vh);\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" if(mpirank==0)cout << \"RHS assembly ended in :----------------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n\n\n";


w <<"//------------Sharing with PETSc------------------//\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" t0 = mpiWtime(); \n";
w <<" if(mpirank==0)cout << \"Sharing with PETSc began\\n\";\n";
w <<"      dmatrix A(ALoc, arrayIntersection,\n";
w <<"                restrictionIntersection, D, bs = 2);// Distributed matrix\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" if(mpirank==0)cout << \"Sharing with PETSc ended in :----------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n\n\n";


w <<"//------------PETSc solving------------------//\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" t0 = mpiWtime(); \n";
w <<" if(mpirank==0)cout << \"Solving with PETSc began\\n\";\n";
w <<"      Vh<real> def(u);\n";
w <<"      set(A,sparams =\" \");            // Solver setup-Petsc\n";
w <<"      u[]=A^-1*b;                     // Solving\n";
w <<" mpiBarrier(mpiCommWorld);\n";
w <<" if(mpirank==0)cout << \"Solving with PETSc ended in :----------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n";	    


if(plotAll){
  system("mkdir -p VTKs");
   
  w <<"//==============================================================================\n";
  w <<"// -------Plotting with paraview-------//\n";
  w <<"//==============================================================================\n\n";

  w <<"load  \"iovtk\"                       // Loading the vtk viz module\n";
  w <<"int[int] vtkorder=[1,1,1];            // Solution export order\n";


  w <<"//------------Paraview plotting------------------//\n";
  w <<" mpiBarrier(mpiCommWorld);\n";
  w <<" t0 = mpiWtime(); \n";
  w <<" if(mpirank==0)cout << \"Post-processing began\\n\";\n";

  w <<"      savevtk(\"VTKs/Displacements-MpiSize_\"+mpisize+\"-Mpi_\"+mpirank+\".vtk\",Th,[u,u1,0],\n"; 
  w <<"      order=vtkorder,dataname=\"Displacement\");\n";
  w <<"      if(mpirank==0)  \n";
  w <<"          exec(\"pvpython  ../Plugins/pvdwriter.py \\\"VTKs/Displacements-MpiSize_\"+mpisize+\"-Mpi_\\\"  \"+mpisize+\"\");\n"; 
    
  w <<" mpiBarrier(mpiCommWorld);\n";
  w <<" if(mpirank==0)cout << \"Post-processing ended in :--------------------->\"<< mpiWtime()-t0 <<\"\\n*\\n\";\n\n"; 
  

}

w <<"if(mpirank==0)cout << \"--------------------------------------------------------------------------\\n\\n\";\n\n";

}
